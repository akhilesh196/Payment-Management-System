<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/HelloController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/HelloController.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem;&#10;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;public class HelloController {&#10;    @GetMapping(&quot;/&quot;)&#10;    public String hello() {&#10;        return &quot;Payment Management System Spring Boot is running!&quot;;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/PaymentManagementSystemApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/PaymentManagementSystemApplication.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;public class PaymentManagementSystemApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(PaymentManagementSystemApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/DataInitializer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/DataInitializer.java" />
              <option name="originalContent" value="package miniproject2.paymentmanagementsystem.config;&#10;import miniproject2.paymentmanagementsystem.model.User;&#10;import miniproject2.paymentmanagementsystem.model.UserRole;&#10;import miniproject2.paymentmanagementsystem.repository.UserRepository;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;public class DataInitializer implements CommandLineRunner {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);&#10;&#10;    private final UserRepository userRepository;&#10;    private final PasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    public DataInitializer(UserRepository userRepository, PasswordEncoder passwordEncoder) {&#10;        this.userRepository = userRepository;&#10;        this.passwordEncoder = passwordEncoder;&#10;    }&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        initializeDefaultUsers();&#10;    }&#10;&#10;    private void initializeDefaultUsers() {&#10;        // Create default admin user if not exists&#10;        if (!userRepository.existsByEmail(&quot;admin@paymentms.com&quot;)) {&#10;            User admin = new User();&#10;            admin.setName(&quot;System Administrator&quot;);&#10;            admin.setEmail(&quot;admin@paymentms.com&quot;);&#10;            admin.setPasswordHash(passwordEncoder.encode(&quot;admin123&quot;));&#10;            admin.setRole(UserRole.ADMIN);&#10;            userRepository.save(admin);&#10;            logger.info(&quot;Created default admin user: admin@paymentms.com&quot;);&#10;        }&#10;&#10;        // Create default finance manager if not exists&#10;        if (!userRepository.existsByEmail(&quot;finance@paymentms.com&quot;)) {&#10;            User financeManager = new User();&#10;            financeManager.setName(&quot;Finance Manager&quot;);&#10;            financeManager.setEmail(&quot;finance@paymentms.com&quot;);&#10;            financeManager.setPasswordHash(passwordEncoder.encode(&quot;finance123&quot;));&#10;            financeManager.setRole(UserRole.FINANCE_MANAGER);&#10;            userRepository.save(financeManager);&#10;            logger.info(&quot;Created default finance manager: finance@paymentms.com&quot;);&#10;        }&#10;&#10;        // Create default viewer if not exists&#10;        if (!userRepository.existsByEmail(&quot;viewer@paymentms.com&quot;)) {&#10;            User viewer = new User();&#10;            viewer.setName(&quot;Payment Viewer&quot;);&#10;            viewer.setEmail(&quot;viewer@paymentms.com&quot;);&#10;            viewer.setPasswordHash(passwordEncoder.encode(&quot;viewer123&quot;));&#10;            viewer.setRole(UserRole.VIEWER);&#10;            userRepository.save(viewer);&#10;            logger.info(&quot;Created default viewer user: viewer@paymentms.com&quot;);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;import miniproject2.paymentmanagementsystem.entity.User;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;import miniproject2.paymentmanagementsystem.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;public class DataInitializer implements CommandLineRunner {&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;    &#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        // Create default admin user if not exists&#10;        if (!userRepository.existsByEmail(&quot;admin@example.com&quot;)) {&#10;            User admin = new User();&#10;            admin.setName(&quot;System Admin&quot;);&#10;            admin.setEmail(&quot;admin@example.com&quot;);&#10;            admin.setPassword(passwordEncoder.encode(&quot;admin123&quot;));&#10;            admin.setRole(Role.ADMIN);&#10;            userRepository.save(admin);&#10;            System.out.println(&quot;Default admin user created: admin@example.com / admin123&quot;);&#10;        }&#10;        &#10;        // Create default finance manager if not exists&#10;        if (!userRepository.existsByEmail(&quot;finance@example.com&quot;)) {&#10;            User financeManager = new User();&#10;            financeManager.setName(&quot;Finance Manager&quot;);&#10;            financeManager.setEmail(&quot;finance@example.com&quot;);&#10;            financeManager.setPassword(passwordEncoder.encode(&quot;finance123&quot;));&#10;            financeManager.setRole(Role.FINANCE_MANAGER);&#10;            userRepository.save(financeManager);&#10;            System.out.println(&quot;Default finance manager created: finance@example.com / finance123&quot;);&#10;        }&#10;        &#10;        // Create default viewer if not exists&#10;        if (!userRepository.existsByEmail(&quot;viewer@example.com&quot;)) {&#10;            User viewer = new User();&#10;            viewer.setName(&quot;Payment Viewer&quot;);&#10;            viewer.setEmail(&quot;viewer@example.com&quot;);&#10;            viewer.setPassword(passwordEncoder.encode(&quot;viewer123&quot;));&#10;            viewer.setRole(Role.VIEWER);&#10;            userRepository.save(viewer);&#10;            System.out.println(&quot;Default viewer user created: viewer@example.com / viewer123&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/JacksonConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/JacksonConfig.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.context.annotation.Primary;&#10;&#10;@Configuration&#10;public class JacksonConfig {&#10;    &#10;    @Bean&#10;    @Primary&#10;    public ObjectMapper objectMapper() {&#10;        ObjectMapper mapper = new ObjectMapper();&#10;        mapper.registerModule(new JavaTimeModule());&#10;        return mapper;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/JwtAuthenticationFilter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/JwtAuthenticationFilter.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import miniproject2.paymentmanagementsystem.service.UserDetailsServiceImpl;&#10;import miniproject2.paymentmanagementsystem.util.JwtUtil;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;&#10;@Component&#10;public class JwtAuthenticationFilter extends OncePerRequestFilter {&#10;    &#10;    @Autowired&#10;    private JwtUtil jwtUtil;&#10;    &#10;    @Autowired&#10;    private UserDetailsServiceImpl userDetailsService;&#10;    &#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, &#10;                                  FilterChain filterChain) throws ServletException, IOException {&#10;        &#10;        final String authHeader = request.getHeader(&quot;Authorization&quot;);&#10;        final String jwt;&#10;        final String userEmail;&#10;        &#10;        if (authHeader == null || !authHeader.startsWith(&quot;Bearer &quot;)) {&#10;            filterChain.doFilter(request, response);&#10;            return;&#10;        }&#10;        &#10;        jwt = authHeader.substring(7);&#10;        userEmail = jwtUtil.extractUsername(jwt);&#10;        &#10;        if (userEmail != null &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == null) {&#10;            UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);&#10;            &#10;            if (jwtUtil.validateToken(jwt, userDetails)) {&#10;                UsernamePasswordAuthenticationToken authToken = &#10;                    new UsernamePasswordAuthenticationToken(&#10;                        userDetails,&#10;                        null,&#10;                        userDetails.getAuthorities()&#10;                    );&#10;                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));&#10;                SecurityContextHolder.getContext().setAuthentication(authToken);&#10;            }&#10;        }&#10;        filterChain.doFilter(request, response);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/MethodSecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/MethodSecurityConfig.java" />
              <option name="originalContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;&#10;&#10;@Configuration&#10;@EnableGlobalMethodSecurity(prePostEnabled = true)&#10;public class MethodSecurityConfig {&#10;    // This configuration enables @PreAuthorize and @PostAuthorize annotations&#10;}&#10;" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;&#10;@Configuration&#10;@EnableMethodSecurity(prePostEnabled = true)&#10;public class MethodSecurityConfig {&#10;    // This configuration enables @PreAuthorize and @PostAuthorize annotations&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/WebSecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/config/WebSecurityConfig.java" />
              <option name="originalContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;&#10;import miniproject2.paymentmanagementsystem.service.UserDetailsServiceImpl;&#10;import miniproject2.paymentmanagementsystem.util.AuthTokenFilter;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@EnableMethodSecurity(prePostEnabled = true)&#10;public class WebSecurityConfig {&#10;    @Autowired&#10;    UserDetailsServiceImpl userDetailsService;&#10;&#10;    @Autowired&#10;    private AuthEntryPointJwt unauthorizedHandler;&#10;&#10;    @Bean&#10;    public AuthTokenFilter authenticationJwtTokenFilter() {&#10;        return new AuthTokenFilter();&#10;    }&#10;&#10;    @Bean&#10;    public DaoAuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();&#10;        authProvider.setUserDetailsService(userDetailsService);&#10;        authProvider.setPasswordEncoder(passwordEncoder());&#10;        return authProvider;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {&#10;        return authConfig.getAuthenticationManager();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.cors(cors -&gt; cors.disable())&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .exceptionHandling(exception -&gt; exception.authenticationEntryPoint(unauthorizedHandler))&#10;                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;                .authorizeHttpRequests(auth -&gt;&#10;                        auth.requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                                .requestMatchers(&quot;/api/test/**&quot;).permitAll()&#10;                                .anyRequest().authenticated()&#10;                );&#10;&#10;        http.authenticationProvider(authenticationProvider());&#10;        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;}" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.config;&#10;&#10;import miniproject2.paymentmanagementsystem.service.UserDetailsServiceImpl;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.AuthenticationProvider;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@EnableMethodSecurity&#10;public class WebSecurityConfig {&#10;    &#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthFilter;&#10;    &#10;    @Autowired&#10;    private UserDetailsServiceImpl userDetailsService;&#10;    &#10;    @Autowired&#10;    private AuthEntryPointJwt unauthorizedHandler;&#10;    &#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.csrf(csrf -&gt; csrf.disable())&#10;            .exceptionHandling(exception -&gt; exception.authenticationEntryPoint(unauthorizedHandler))&#10;            .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;            .authorizeHttpRequests(authz -&gt; authz&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/test/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/users/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(&quot;/api/payments/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;FINANCE_MANAGER&quot;, &quot;VIEWER&quot;)&#10;                .anyRequest().authenticated()&#10;            )&#10;            .authenticationProvider(authenticationProvider())&#10;            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);&#10;        &#10;        return http.build();&#10;    }&#10;    &#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;    &#10;    @Bean&#10;    public AuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();&#10;        authProvider.setUserDetailsService(userDetailsService);&#10;        authProvider.setPasswordEncoder(passwordEncoder());&#10;        return authProvider;&#10;    }&#10;    &#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {&#10;        return config.getAuthenticationManager();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/AuthResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/AuthResponse.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;public class AuthResponse {&#10;    private String token;&#10;    private String type = &quot;Bearer&quot;;&#10;    private Long id;&#10;    private String name;&#10;    private String email;&#10;    private String role;&#10;    &#10;    // Constructors&#10;    public AuthResponse() {}&#10;    &#10;    public AuthResponse(String token, Long id, String name, String email, String role) {&#10;        this.token = token;&#10;        this.id = id;&#10;        this.name = name;&#10;        this.email = email;&#10;        this.role = role;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public String getToken() { return token; }&#10;    public void setToken(String token) { this.token = token; }&#10;    &#10;    public String getType() { return type; }&#10;    public void setType(String type) { this.type = type; }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getRole() { return role; }&#10;    public void setRole(String role) { this.role = role; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/CreateUserRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/CreateUserRequest.java" />
              <option name="originalContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import miniproject2.paymentmanagementsystem.model.UserRole;&#10;&#10;public class CreateUserRequest {&#10;    @NotBlank(message = &quot;Name is required&quot;)&#10;    @Size(max = 100, message = &quot;Name must not exceed 100 characters&quot;)&#10;    private String name;&#10;&#10;    public UserRole getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(UserRole role) {&#10;        this.role = role;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    @Size(max = 100, message = &quot;Email must not exceed 100 characters&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;&#10;    private UserRole role = UserRole.VIEWER;&#10;}&#10;" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;&#10;public class CreateUserRequest {&#10;    @NotBlank(message = &quot;Name is required&quot;)&#10;    @Size(max = 100, message = &quot;Name must not exceed 100 characters&quot;)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    @Size(max = 100, message = &quot;Email must not exceed 100 characters&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;&#10;    private Role role = Role.VIEWER;&#10;&#10;    // Getters and Setters&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public Role getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(Role role) {&#10;        this.role = role;&#10;    }&#10;&#10;    // Constructors&#10;    public CreateUserRequest() {}&#10;&#10;    public CreateUserRequest(String name, String email, String password, Role role) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.role = role;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/JwtResponseDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/JwtResponseDTO.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;&#10;public class JwtResponseDTO {&#10;    &#10;    private String token;&#10;    private String type = &quot;Bearer&quot;;&#10;    private Long userId;&#10;    private String email;&#10;    private String name;&#10;    private Role role;&#10;    &#10;    // Constructors&#10;    public JwtResponseDTO() {}&#10;    &#10;    public JwtResponseDTO(String token, Long userId, String email, String name, Role role) {&#10;        this.token = token;&#10;        this.userId = userId;&#10;        this.email = email;&#10;        this.name = name;&#10;        this.role = role;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public String getToken() {&#10;        return token;&#10;    }&#10;    &#10;    public void setToken(String token) {&#10;        this.token = token;&#10;    }&#10;    &#10;    public String getType() {&#10;        return type;&#10;    }&#10;    &#10;    public void setType(String type) {&#10;        this.type = type;&#10;    }&#10;    &#10;    public Long getUserId() {&#10;        return userId;&#10;    }&#10;    &#10;    public void setUserId(Long userId) {&#10;        this.userId = userId;&#10;    }&#10;    &#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;    &#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    &#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;    &#10;    public Role getRole() {&#10;        return role;&#10;    }&#10;    &#10;    public void setRole(Role role) {&#10;        this.role = role;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/LoginRequest.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class LoginRequest {&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    private String email;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    private String password;&#10;    &#10;    // Constructors&#10;    public LoginRequest() {}&#10;    &#10;    public LoginRequest(String email, String password) {&#10;        this.email = email;&#10;        this.password = password;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentCreateRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentCreateRequest.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.DecimalMin;&#10;import jakarta.validation.constraints.NotNull;&#10;import miniproject2.paymentmanagementsystem.enums.Category;&#10;import miniproject2.paymentmanagementsystem.enums.PaymentType;&#10;import miniproject2.paymentmanagementsystem.enums.Status;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class PaymentCreateRequest {&#10;    @NotNull(message = &quot;Amount is required&quot;)&#10;    @DecimalMin(value = &quot;0.01&quot;, message = &quot;Amount must be greater than 0&quot;)&#10;    private BigDecimal amount;&#10;    &#10;    @NotNull(message = &quot;Payment type is required&quot;)&#10;    private PaymentType paymentType;&#10;    &#10;    @NotNull(message = &quot;Category is required&quot;)&#10;    private Category category;&#10;    &#10;    @NotNull(message = &quot;Status is required&quot;)&#10;    private Status status;&#10;    &#10;    @NotNull(message = &quot;Date is required&quot;)&#10;    private LocalDateTime date;&#10;    &#10;    // Constructors&#10;    public PaymentCreateRequest() {}&#10;    &#10;    public PaymentCreateRequest(BigDecimal amount, PaymentType paymentType, Category category, &#10;                               Status status, LocalDateTime date) {&#10;        this.amount = amount;&#10;        this.paymentType = paymentType;&#10;        this.category = category;&#10;        this.status = status;&#10;        this.date = date;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public BigDecimal getAmount() { return amount; }&#10;    public void setAmount(BigDecimal amount) { this.amount = amount; }&#10;    &#10;    public PaymentType getPaymentType() { return paymentType; }&#10;    public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; }&#10;    &#10;    public Category getCategory() { return category; }&#10;    public void setCategory(Category category) { this.category = category; }&#10;    &#10;    public Status getStatus() { return status; }&#10;    public void setStatus(Status status) { this.status = status; }&#10;    &#10;    public LocalDateTime getDate() { return date; }&#10;    public void setDate(LocalDateTime date) { this.date = date; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentDTO.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import miniproject2.paymentmanagementsystem.enums.Category;&#10;import miniproject2.paymentmanagementsystem.enums.PaymentType;&#10;import miniproject2.paymentmanagementsystem.enums.Status;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Positive;&#10;&#10;import java.math.BigDecimal;&#10;&#10;public class PaymentDTO {&#10;    &#10;    @NotNull(message = &quot;Amount is required&quot;)&#10;    @Positive(message = &quot;Amount must be positive&quot;)&#10;    private BigDecimal amount;&#10;    &#10;    @NotNull(message = &quot;Payment type is required&quot;)&#10;    private PaymentType paymentType;&#10;    &#10;    @NotNull(message = &quot;Category is required&quot;)&#10;    private Category category;&#10;    &#10;    @NotNull(message = &quot;Status is required&quot;)&#10;    private Status status;&#10;    &#10;    @NotNull(message = &quot;Creator ID is required&quot;)&#10;    private Long createdById;&#10;    &#10;    // Constructors&#10;    public PaymentDTO() {}&#10;    &#10;    public PaymentDTO(BigDecimal amount, PaymentType paymentType, Category category, Status status, Long createdById) {&#10;        this.amount = amount;&#10;        this.paymentType = paymentType;&#10;        this.category = category;&#10;        this.status = status;&#10;        this.createdById = createdById;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public BigDecimal getAmount() {&#10;        return amount;&#10;    }&#10;    &#10;    public void setAmount(BigDecimal amount) {&#10;        this.amount = amount;&#10;    }&#10;    &#10;    public PaymentType getPaymentType() {&#10;        return paymentType;&#10;    }&#10;    &#10;    public void setPaymentType(PaymentType paymentType) {&#10;        this.paymentType = paymentType;&#10;    }&#10;    &#10;    public Category getCategory() {&#10;        return category;&#10;    }&#10;    &#10;    public void setCategory(Category category) {&#10;        this.category = category;&#10;    }&#10;    &#10;    public Status getStatus() {&#10;        return status;&#10;    }&#10;    &#10;    public void setStatus(Status status) {&#10;        this.status = status;&#10;    }&#10;    &#10;    public Long getCreatedById() {&#10;        return createdById;&#10;    }&#10;    &#10;    public void setCreatedById(Long createdById) {&#10;        this.createdById = createdById;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentResponse.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import miniproject2.paymentmanagementsystem.enums.Category;&#10;import miniproject2.paymentmanagementsystem.enums.PaymentType;&#10;import miniproject2.paymentmanagementsystem.enums.Status;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class PaymentResponse {&#10;    private Long id;&#10;    private BigDecimal amount;&#10;    private PaymentType paymentType;&#10;    private Category category;&#10;    private Status status;&#10;    private LocalDateTime date;&#10;    private UserResponse createdBy;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;    &#10;    // Constructors&#10;    public PaymentResponse() {}&#10;    &#10;    public PaymentResponse(Long id, BigDecimal amount, PaymentType paymentType, Category category, &#10;                          Status status, LocalDateTime date, UserResponse createdBy, &#10;                          LocalDateTime createdAt, LocalDateTime updatedAt) {&#10;        this.id = id;&#10;        this.amount = amount;&#10;        this.paymentType = paymentType;&#10;        this.category = category;&#10;        this.status = status;&#10;        this.date = date;&#10;        this.createdBy = createdBy;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public BigDecimal getAmount() { return amount; }&#10;    public void setAmount(BigDecimal amount) { this.amount = amount; }&#10;    &#10;    public PaymentType getPaymentType() { return paymentType; }&#10;    public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; }&#10;    &#10;    public Category getCategory() { return category; }&#10;    public void setCategory(Category category) { this.category = category; }&#10;    &#10;    public Status getStatus() { return status; }&#10;    public void setStatus(Status status) { this.status = status; }&#10;    &#10;    public LocalDateTime getDate() { return date; }&#10;    public void setDate(LocalDateTime date) { this.date = date; }&#10;    &#10;    public UserResponse getCreatedBy() { return createdBy; }&#10;    public void setCreatedBy(UserResponse createdBy) { this.createdBy = createdBy; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentUpdateRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/PaymentUpdateRequest.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.DecimalMin;&#10;import miniproject2.paymentmanagementsystem.enums.Category;&#10;import miniproject2.paymentmanagementsystem.enums.PaymentType;&#10;import miniproject2.paymentmanagementsystem.enums.Status;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class PaymentUpdateRequest {&#10;    @DecimalMin(value = &quot;0.01&quot;, message = &quot;Amount must be greater than 0&quot;)&#10;    private BigDecimal amount;&#10;    &#10;    private PaymentType paymentType;&#10;    private Category category;&#10;    private Status status;&#10;    private LocalDateTime date;&#10;    &#10;    // Constructors&#10;    public PaymentUpdateRequest() {}&#10;    &#10;    public PaymentUpdateRequest(BigDecimal amount, PaymentType paymentType, Category category, &#10;                               Status status, LocalDateTime date) {&#10;        this.amount = amount;&#10;        this.paymentType = paymentType;&#10;        this.category = category;&#10;        this.status = status;&#10;        this.date = date;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public BigDecimal getAmount() { return amount; }&#10;    public void setAmount(BigDecimal amount) { this.amount = amount; }&#10;    &#10;    public PaymentType getPaymentType() { return paymentType; }&#10;    public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; }&#10;    &#10;    public Category getCategory() { return category; }&#10;    public void setCategory(Category category) { this.category = category; }&#10;    &#10;    public Status getStatus() { return status; }&#10;    public void setStatus(Status status) { this.status = status; }&#10;    &#10;    public LocalDateTime getDate() { return date; }&#10;    public void setDate(LocalDateTime date) { this.date = date; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/UserCreateRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/UserCreateRequest.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;&#10;public class UserCreateRequest {&#10;    @NotBlank(message = &quot;Name is required&quot;)&#10;    private String name;&#10;    &#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    private String email;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    private String password;&#10;    &#10;    @NotNull(message = &quot;Role is required&quot;)&#10;    private Role role;&#10;    &#10;    // Constructors&#10;    public UserCreateRequest() {}&#10;    &#10;    public UserCreateRequest(String name, String email, String password, Role role) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.role = role;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;    &#10;    public Role getRole() { return role; }&#10;    public void setRole(Role role) { this.role = role; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/UserDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/UserDTO.java" />
              <option name="originalContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;&#10;import miniproject2.paymentmanagementsystem.model.UserRole;&#10;&#10;&#10;public class UserDTO {&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Name is required&quot;)&#10;    @Size(max = 100, message = &quot;Name must not exceed 100 characters&quot;)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    @Size(max = 100, message = &quot;Email must not exceed 100 characters&quot;)&#10;    private String email;&#10;&#10;    private UserRole role;&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public UserRole getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(UserRole role) {&#10;        this.role = role;&#10;    }&#10;&#10;    // Constructors&#10;    public UserDTO() {}&#10;&#10;    public UserDTO(Long id, String name, String email, UserRole role) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.email = email;&#10;        this.role = role;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;&#10;public class UserDTO {&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Name is required&quot;)&#10;    @Size(max = 100, message = &quot;Name must not exceed 100 characters&quot;)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    @Size(max = 100, message = &quot;Email must not exceed 100 characters&quot;)&#10;    private String email;&#10;&#10;    private Role role;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;&#10;    // Getters and Setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public Role getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(Role role) {&#10;        this.role = role;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // Constructors&#10;    public UserDTO() {}&#10;&#10;    public UserDTO(Long id, String name, String email, Role role) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.email = email;&#10;        this.role = role;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/UserResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/dto/UserResponse.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.dto;&#10;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class UserResponse {&#10;    private Long id;&#10;    private String name;&#10;    private String email;&#10;    private Role role;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;    &#10;    // Constructors&#10;    public UserResponse() {}&#10;    &#10;    public UserResponse(Long id, String name, String email, Role role, &#10;                       LocalDateTime createdAt, LocalDateTime updatedAt) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.email = email;&#10;        this.role = role;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public Role getRole() { return role; }&#10;    public void setRole(Role role) { this.role = role; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/enums/PaymentType.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/enums/PaymentType.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.enums;&#10;&#10;public enum PaymentType {&#10;    INCOMING,&#10;    OUTGOING&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/enums/Role.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/enums/Role.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.enums;&#10;&#10;public enum Role {&#10;    ADMIN,&#10;    FINANCE_MANAGER,&#10;    VIEWER&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/enums/Status.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/enums/Status.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.enums;&#10;&#10;public enum Status {&#10;    PENDING,&#10;    PROCESSING,&#10;    COMPLETED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/repository/UserRepository.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.repository;&#10;&#10;import miniproject2.paymentmanagementsystem.entity.User;&#10;import miniproject2.paymentmanagementsystem.enums.Role;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    List&lt;User&gt; findByRole(Role role);&#10;    boolean existsByEmail(String email);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/service/UserDetailsServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miniproject2/paymentmanagementsystem/service/UserDetailsServiceImpl.java" />
              <option name="updatedContent" value="package miniproject2.paymentmanagementsystem.service;&#10;&#10;import miniproject2.paymentmanagementsystem.entity.User;&#10;import miniproject2.paymentmanagementsystem.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class UserDetailsServiceImpl implements UserDetailsService {&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    @Override&#10;    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {&#10;        User user = userRepository.findByEmail(email)&#10;                .orElseThrow(() -&gt; new UsernameNotFoundException(&quot;User not found with email: &quot; + email));&#10;        &#10;        return user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/Main.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.controller.AdminController;&#10;import org.paymentmanagementsystem.controller.AuthController;&#10;import org.paymentmanagementsystem.controller.PaymentController;&#10;import org.paymentmanagementsystem.model.User;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static AuthController authController;&#10;    private static PaymentController paymentController;&#10;    private static AdminController adminController;&#10;&#10;    public static void main(String[] args) {&#10;        try {&#10;            System.out.println(&quot;=== PAYMENT MANAGEMENT SYSTEM ===&quot;);&#10;            System.out.println(&quot;Initializing application...&quot;);&#10;&#10;            // Initialize database&#10;            DatabaseConfig.getInstance();&#10;            System.out.println(&quot;Database initialized successfully!&quot;);&#10;&#10;            initializeControllers();&#10;            showWelcomeMessage();&#10;            runApplication();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to start application: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            System.exit(1);&#10;        }&#10;    }&#10;&#10;    private static void initializeControllers() throws Exception {&#10;        System.out.println(&quot;Initializing controllers...&quot;);&#10;        authController = new AuthController();&#10;        paymentController = new PaymentController();&#10;        adminController = new AdminController();&#10;        System.out.println(&quot;Application ready!&quot;);&#10;    }&#10;&#10;    private static void showWelcomeMessage() {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(60));&#10;        System.out.println(&quot;           WELCOME TO PAYMENT MANAGEMENT SYSTEM&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;        System.out.println(&quot;Features:&quot;);&#10;        System.out.println(&quot;• Role-based access control (Admin, Finance Manager, Viewer)&quot;);&#10;        System.out.println(&quot;• Payment creation and management&quot;);&#10;        System.out.println(&quot;• Payment approval/rejection workflow&quot;);&#10;        System.out.println(&quot;• Audit trail for all operations&quot;);&#10;        System.out.println(&quot;• Real-time payment status tracking&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;        System.out.println(&quot;TIP: Use the default admin credentials to get started!&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;    }&#10;&#10;    private static void runApplication() {&#10;        User currentUser = null;&#10;&#10;        while (true) {&#10;            try {&#10;                if (currentUser == null) {&#10;                    currentUser = handleAuthenticationMenu();&#10;                } else {&#10;&#10;                    boolean shouldLogout = handleMainMenu(currentUser);&#10;                    if (shouldLogout) {&#10;                        authController.handleLogout(currentUser);&#10;                        currentUser = null;&#10;                        System.out.println(&quot;You have been logged out successfully!&quot;);&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                System.err.println(&quot;An error occurred: &quot; + e.getMessage());&#10;                System.out.println(&quot;Please try again.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static User handleAuthenticationMenu() {&#10;        System.out.println(&quot;\n=== AUTHENTICATION ===&quot;);&#10;        System.out.println(&quot;1. Login&quot;);&#10;        System.out.println(&quot;2. Exit&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    return authController.handleLogin();&#10;                case 2:&#10;                    System.out.println(&quot;Goodbye!&quot;);&#10;                    System.exit(0);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    private static boolean handleMainMenu(User currentUser) {&#10;        String roleName = currentUser.getRole().getRoleName().toLowerCase();&#10;&#10;        System.out.println(&quot;\n=== MAIN MENU ===&quot;);&#10;        System.out.println(&quot;Logged in as: &quot; + currentUser.getName() + &quot; (&quot; + roleName + &quot;)&quot;);&#10;&#10;        return switch (roleName) {&#10;            case &quot;admin&quot; -&gt; showAdminMenu(currentUser);&#10;            case &quot;finance_manager&quot; -&gt; showFinanceManagerMenu(currentUser);&#10;            case &quot;viewer&quot; -&gt; showViewerMenu(currentUser);&#10;            default -&gt; {&#10;                System.out.println(&quot;Unknown role. Limited functionality available.&quot;);&#10;                yield showViewerMenu(currentUser);&#10;            }&#10;        };&#10;    }&#10;&#10;    private static boolean showAdminMenu(User currentUser) {&#10;        System.out.println(&quot;1. Create Payment&quot;);&#10;        System.out.println(&quot;2. View Payments&quot;);&#10;        System.out.println(&quot;3. Filter Payments by Status&quot;);&#10;        System.out.println(&quot;4. Approve Payment&quot;);&#10;        System.out.println(&quot;5. Reject Payment&quot;);&#10;        System.out.println(&quot;6. Delete Payment&quot;);&#10;        System.out.println(&quot;7. Register New User&quot;);&#10;        System.out.println(&quot;8. View All Teams&quot;);&#10;        System.out.println(&quot;9. View Team Members&quot;);&#10;        System.out.println(&quot;10. Manage Salaries&quot;);&#10;        System.out.println(&quot;11. Generate Monthly Salaries&quot;);&#10;        System.out.println(&quot;12. Logout&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    paymentController.handleCreatePayment(currentUser);&#10;                    break;&#10;                case 2:&#10;                    paymentController.handleViewPayments(currentUser);&#10;                    break;&#10;                case 3:&#10;                    paymentController.handleFilterPaymentsByStatus(currentUser);&#10;                    break;&#10;                case 4:&#10;                    adminController.handleApprovePayment(currentUser);&#10;                    break;&#10;                case 5:&#10;                    adminController.handleRejectPayment(currentUser);&#10;                    break;&#10;                case 6:&#10;                    adminController.handleDeletePayment(currentUser);&#10;                    break;&#10;                case 7:&#10;                    authController.handleRegistration();&#10;                    break;&#10;                case 8:&#10;                    adminController.handleViewAllTeams(currentUser);&#10;                    break;&#10;                case 9:&#10;                    adminController.handleViewTeamMembers(currentUser);&#10;                    break;&#10;                case 10:&#10;                    adminController.handleManageSalaries(currentUser);&#10;                    break;&#10;                case 11:&#10;                    adminController.handleGenerateMonthlySalaries(currentUser);&#10;                    break;&#10;                case 12:&#10;                    return true; // User chose to logout&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private static boolean showFinanceManagerMenu(User currentUser) {&#10;        System.out.println(&quot;1. Create Payment&quot;);&#10;        System.out.println(&quot;2. View Payments&quot;);&#10;        System.out.println(&quot;3. Filter Payments by Status&quot;);&#10;        System.out.println(&quot;4. Approve Payment&quot;);&#10;        System.out.println(&quot;5. Reject Payment&quot;);&#10;        System.out.println(&quot;6. Create Team&quot;);&#10;        System.out.println(&quot;7. Manage Team Members&quot;);&#10;        System.out.println(&quot;8. View My Teams&quot;);&#10;        System.out.println(&quot;9. Logout&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    paymentController.handleCreatePayment(currentUser);&#10;                    break;&#10;                case 2:&#10;                    paymentController.handleViewPayments(currentUser);&#10;                    break;&#10;                case 3:&#10;                    paymentController.handleFilterPaymentsByStatus(currentUser);&#10;                    break;&#10;                case 4:&#10;                    adminController.handleApprovePayment(currentUser);&#10;                    break;&#10;                case 5:&#10;                    adminController.handleRejectPayment(currentUser);&#10;                    break;&#10;                case 6:&#10;                    adminController.handleCreateTeam(currentUser);&#10;                    break;&#10;                case 7:&#10;                    adminController.handleManageTeamMembers(currentUser);&#10;                    break;&#10;                case 8:&#10;                    adminController.handleViewMyTeams(currentUser);&#10;                    break;&#10;                case 9:&#10;                    return true;&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private static boolean showViewerMenu(User currentUser) {&#10;        System.out.println(&quot;1. View My Payments&quot;);&#10;        System.out.println(&quot;2. Filter My Payments by Status&quot;);&#10;        System.out.println(&quot;3. Logout&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    paymentController.handleViewPayments(currentUser);&#10;                    break;&#10;                case 2:&#10;                    paymentController.handleFilterPaymentsByStatus(currentUser);&#10;                    break;&#10;                case 3:&#10;                    return true;&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return false;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.paymentmanagementsystem;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.controller.AdminController;&#10;import org.paymentmanagementsystem.controller.AuthController;&#10;import org.paymentmanagementsystem.controller.PaymentController;&#10;import org.paymentmanagementsystem.model.User;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static AuthController authController;&#10;    private static PaymentController paymentController;&#10;    private static AdminController adminController;&#10;&#10;    public static void main(String[] args) {&#10;        try {&#10;            System.out.println(&quot;=== PAYMENT MANAGEMENT SYSTEM ===&quot;);&#10;            System.out.println(&quot;Initializing application...&quot;);&#10;&#10;            // Initialize database&#10;            DatabaseConfig.getInstance();&#10;            System.out.println(&quot;Database initialized successfully!&quot;);&#10;&#10;            initializeControllers();&#10;            showWelcomeMessage();&#10;            runApplication();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to start application: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            System.exit(1);&#10;        }&#10;    }&#10;&#10;    private static void initializeControllers() throws Exception {&#10;        System.out.println(&quot;Initializing controllers...&quot;);&#10;        authController = new AuthController();&#10;        paymentController = new PaymentController();&#10;        adminController = new AdminController();&#10;        System.out.println(&quot;Application ready!&quot;);&#10;    }&#10;&#10;    private static void showWelcomeMessage() {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(60));&#10;        System.out.println(&quot;           WELCOME TO PAYMENT MANAGEMENT SYSTEM&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;        System.out.println(&quot;Features:&quot;);&#10;        System.out.println(&quot;• Role-based access control (Admin, Finance Manager, Viewer)&quot;);&#10;        System.out.println(&quot;• Payment creation and management&quot;);&#10;        System.out.println(&quot;• Payment approval/rejection workflow&quot;);&#10;        System.out.println(&quot;• Audit trail for all operations&quot;);&#10;        System.out.println(&quot;• Real-time payment status tracking&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;        System.out.println(&quot;TIP: Use the default admin credentials to get started!&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;    }&#10;&#10;    private static void runApplication() {&#10;        User currentUser = null;&#10;&#10;        while (true) {&#10;            try {&#10;                if (currentUser == null) {&#10;                    currentUser = handleAuthenticationMenu();&#10;                } else {&#10;&#10;                    boolean shouldLogout = handleMainMenu(currentUser);&#10;                    if (shouldLogout) {&#10;                        authController.handleLogout(currentUser);&#10;                        currentUser = null;&#10;                        System.out.println(&quot;You have been logged out successfully!&quot;);&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                System.err.println(&quot;An error occurred: &quot; + e.getMessage());&#10;                System.out.println(&quot;Please try again.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static User handleAuthenticationMenu() {&#10;        System.out.println(&quot;\n=== AUTHENTICATION ===&quot;);&#10;        System.out.println(&quot;1. Login&quot;);&#10;        System.out.println(&quot;2. Exit&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    return authController.handleLogin();&#10;                case 2:&#10;                    System.out.println(&quot;Goodbye!&quot;);&#10;                    System.exit(0);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    private static boolean handleMainMenu(User currentUser) {&#10;        String roleName = currentUser.getRole().getRoleName().toLowerCase();&#10;&#10;        System.out.println(&quot;\n=== MAIN MENU ===&quot;);&#10;        System.out.println(&quot;Logged in as: &quot; + currentUser.getName() + &quot; (&quot; + roleName + &quot;)&quot;);&#10;&#10;        return switch (roleName) {&#10;            case &quot;admin&quot; -&gt; showAdminMenu(currentUser);&#10;            case &quot;finance_manager&quot; -&gt; showFinanceManagerMenu(currentUser);&#10;            case &quot;viewer&quot; -&gt; showViewerMenu(currentUser);&#10;            default -&gt; {&#10;                System.out.println(&quot;Unknown role. Limited functionality available.&quot;);&#10;                yield showViewerMenu(currentUser);&#10;            }&#10;        };&#10;    }&#10;&#10;    private static boolean showAdminMenu(User currentUser) {&#10;        System.out.println(&quot;1. Create Payment&quot;);&#10;        System.out.println(&quot;2. View Payments&quot;);&#10;        System.out.println(&quot;3. Filter Payments by Status&quot;);&#10;        System.out.println(&quot;4. Approve Payment&quot;);&#10;        System.out.println(&quot;5. Reject Payment&quot;);&#10;        System.out.println(&quot;6. Delete Payment&quot;);&#10;        System.out.println(&quot;7. Register New User&quot;);&#10;        System.out.println(&quot;8. View All Teams&quot;);&#10;        System.out.println(&quot;9. View Team Members&quot;);&#10;        System.out.println(&quot;10. Manage Salaries&quot;);&#10;        System.out.println(&quot;11. Generate Monthly Salaries&quot;);&#10;        System.out.println(&quot;12. Generate Reports&quot;);&#10;        System.out.println(&quot;13. Logout&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    paymentController.handleCreatePayment(currentUser);&#10;                    break;&#10;                case 2:&#10;                    paymentController.handleViewPayments(currentUser);&#10;                    break;&#10;                case 3:&#10;                    paymentController.handleFilterPaymentsByStatus(currentUser);&#10;                    break;&#10;                case 4:&#10;                    adminController.handleApprovePayment(currentUser);&#10;                    break;&#10;                case 5:&#10;                    adminController.handleRejectPayment(currentUser);&#10;                    break;&#10;                case 6:&#10;                    adminController.handleDeletePayment(currentUser);&#10;                    break;&#10;                case 7:&#10;                    authController.handleRegistration();&#10;                    break;&#10;                case 8:&#10;                    adminController.handleViewAllTeams(currentUser);&#10;                    break;&#10;                case 9:&#10;                    adminController.handleViewTeamMembers(currentUser);&#10;                    break;&#10;                case 10:&#10;                    adminController.handleManageSalaries(currentUser);&#10;                    break;&#10;                case 11:&#10;                    adminController.handleGenerateMonthlySalaries(currentUser);&#10;                    break;&#10;                case 12:&#10;                    adminController.handleGenerateReports(currentUser);&#10;                    break;&#10;                case 13:&#10;                    return true; // User chose to logout&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private static boolean showFinanceManagerMenu(User currentUser) {&#10;        System.out.println(&quot;1. Create Payment&quot;);&#10;        System.out.println(&quot;2. View Payments&quot;);&#10;        System.out.println(&quot;3. Filter Payments by Status&quot;);&#10;        System.out.println(&quot;4. Approve Payment&quot;);&#10;        System.out.println(&quot;5. Reject Payment&quot;);&#10;        System.out.println(&quot;6. Create Team&quot;);&#10;        System.out.println(&quot;7. Manage Team Members&quot;);&#10;        System.out.println(&quot;8. View My Teams&quot;);&#10;        System.out.println(&quot;9. Generate Reports&quot;);&#10;        System.out.println(&quot;10. Logout&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    paymentController.handleCreatePayment(currentUser);&#10;                    break;&#10;                case 2:&#10;                    paymentController.handleViewPayments(currentUser);&#10;                    break;&#10;                case 3:&#10;                    paymentController.handleFilterPaymentsByStatus(currentUser);&#10;                    break;&#10;                case 4:&#10;                    adminController.handleApprovePayment(currentUser);&#10;                    break;&#10;                case 5:&#10;                    adminController.handleRejectPayment(currentUser);&#10;                    break;&#10;                case 6:&#10;                    adminController.handleCreateTeam(currentUser);&#10;                    break;&#10;                case 7:&#10;                    adminController.handleManageTeamMembers(currentUser);&#10;                    break;&#10;                case 8:&#10;                    adminController.handleViewMyTeams(currentUser);&#10;                    break;&#10;                case 9:&#10;                    adminController.handleGenerateReports(currentUser);&#10;                    break;&#10;                case 10:&#10;                    return true;&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private static boolean showViewerMenu(User currentUser) {&#10;        System.out.println(&quot;1. View My Payments&quot;);&#10;        System.out.println(&quot;2. Filter My Payments by Status&quot;);&#10;        System.out.println(&quot;3. Logout&quot;);&#10;        System.out.print(&quot;Choose option: &quot;);&#10;&#10;        try {&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            switch (choice) {&#10;                case 1:&#10;                    paymentController.handleViewPayments(currentUser);&#10;                    break;&#10;                case 2:&#10;                    paymentController.handleFilterPaymentsByStatus(currentUser);&#10;                    break;&#10;                case 3:&#10;                    return true;&#10;                default:&#10;                    System.out.println(&quot;Invalid option. Please try again.&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        }&#10;&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/config/DatabaseConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/config/DatabaseConfig.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.config;&#10;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;import java.sql.Statement;&#10;import java.util.Properties;&#10;import java.util.concurrent.ArrayBlockingQueue;&#10;import java.util.concurrent.BlockingQueue;&#10;&#10;public class DatabaseConfig {&#10;    private static final String PROPERTIES_FILE = &quot;/database.properties&quot;;&#10;    private static DatabaseConfig instance;&#10;    private final Properties properties;&#10;    private final BlockingQueue&lt;Connection&gt; connectionPool;&#10;&#10;    private DatabaseConfig() throws SQLException, IOException {&#10;        properties = loadProperties();&#10;        ensureDatabaseExists();&#10;        int poolSize = Integer.parseInt(properties.getProperty(&quot;db.pool.size&quot;, &quot;10&quot;));&#10;        connectionPool = new ArrayBlockingQueue&lt;&gt;(poolSize);&#10;        initializePool(poolSize);&#10;        initializeSchema();&#10;    }&#10;&#10;    public static synchronized DatabaseConfig getInstance() throws SQLException, IOException {&#10;        if (instance == null) {&#10;            instance = new DatabaseConfig();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private Properties loadProperties() throws IOException {&#10;        Properties props = new Properties();&#10;        try (InputStream input = getClass().getResourceAsStream(PROPERTIES_FILE)) {&#10;            if (input == null) {&#10;                throw new IOException(&quot;Unable to find &quot; + PROPERTIES_FILE);&#10;            }&#10;            props.load(input);&#10;        }&#10;        return props;&#10;    }&#10;&#10;    private void ensureDatabaseExists() throws SQLException {&#10;        String fullUrl = properties.getProperty(&quot;db.url&quot;);&#10;        String username = properties.getProperty(&quot;db.username&quot;);&#10;        String password = properties.getProperty(&quot;db.password&quot;);&#10;&#10;        // Extract database name from URL&#10;        String[] urlParts = fullUrl.split(&quot;/&quot;);&#10;        String databaseName = urlParts[urlParts.length - 1];&#10;&#10;        // Create connection to postgres database to check if target database exists&#10;        String postgresUrl = fullUrl.substring(0, fullUrl.lastIndexOf('/')) + &quot;/postgres&quot;;&#10;&#10;        try {&#10;            Class.forName(properties.getProperty(&quot;db.driver&quot;));&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;PostgreSQL driver not found&quot;, e);&#10;        }&#10;&#10;        try (Connection conn = DriverManager.getConnection(postgresUrl, username, password);&#10;             Statement stmt = conn.createStatement()) {&#10;&#10;            // Check if database exists&#10;            String checkDbQuery = &quot;SELECT 1 FROM pg_database WHERE datname = '&quot; + databaseName + &quot;'&quot;;&#10;            if (!stmt.executeQuery(checkDbQuery).next()) {&#10;                // Database doesn't exist, create it&#10;                String createDbQuery = &quot;CREATE DATABASE &quot; + databaseName;&#10;                stmt.executeUpdate(createDbQuery);&#10;                System.out.println(&quot;Database '&quot; + databaseName + &quot;' created successfully.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Database '&quot; + databaseName + &quot;' already exists.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void initializePool(int poolSize) throws SQLException {&#10;        String url = properties.getProperty(&quot;db.url&quot;);&#10;        String username = properties.getProperty(&quot;db.username&quot;);&#10;        String password = properties.getProperty(&quot;db.password&quot;);&#10;&#10;        for (int i = 0; i &lt; poolSize; i++) {&#10;            Connection connection = DriverManager.getConnection(url, username, password);&#10;            connectionPool.offer(connection);&#10;        }&#10;    }&#10;&#10;    private void initializeSchema() throws SQLException {&#10;        Connection conn = null;&#10;        try {&#10;            conn = getConnection();&#10;&#10;            // Check if tables exist&#10;            if (!tablesExist(conn)) {&#10;                System.out.println(&quot;Initializing database schema...&quot;);&#10;                createTables(conn);&#10;                insertDefaultData(conn);&#10;                createIndexes(conn);&#10;                System.out.println(&quot;Database schema initialized successfully!&quot;);&#10;            } else {&#10;                System.out.println(&quot;Database schema already exists.&quot;);&#10;            }&#10;        } finally {&#10;            returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    private boolean tablesExist(Connection conn) throws SQLException {&#10;        String checkTableQuery = &quot;&quot;&quot;&#10;            SELECT COUNT(*) FROM information_schema.tables &#10;            WHERE table_schema = 'public' &#10;            AND table_name IN ('roles', 'users', 'categories', 'status', 'payments', 'audit_trail')&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            var rs = stmt.executeQuery(checkTableQuery);&#10;            if (rs.next()) {&#10;                return rs.getInt(1) == 6; // All 6 tables exist&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private void createTables(Connection conn) throws SQLException {&#10;        String[] createTableQueries = {&#10;                // Create roles table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE roles (&#10;                role_id SERIAL PRIMARY KEY,&#10;                role_name VARCHAR(50) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create users table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE users (&#10;                user_id SERIAL PRIMARY KEY,&#10;                name VARCHAR(100) NOT NULL,&#10;                email VARCHAR(100) NOT NULL UNIQUE,&#10;                password_hash VARCHAR(255) NOT NULL,&#10;                role_id INTEGER NOT NULL,&#10;                FOREIGN KEY (role_id) REFERENCES roles(role_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create categories table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE categories (&#10;                category_id SERIAL PRIMARY KEY,&#10;                category_name VARCHAR(100) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create status table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE status (&#10;                status_id SERIAL PRIMARY KEY,&#10;                status_name VARCHAR(50) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create payments table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE payments (&#10;                payment_id SERIAL PRIMARY KEY,&#10;                amount DECIMAL(15,2) NOT NULL,&#10;                type VARCHAR(50) NOT NULL,&#10;                payment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;                description TEXT,&#10;                category_id INTEGER NOT NULL,&#10;                status_id INTEGER NOT NULL,&#10;                created_by_user_id INTEGER NOT NULL,&#10;                FOREIGN KEY (category_id) REFERENCES categories(category_id),&#10;                FOREIGN KEY (status_id) REFERENCES status(status_id),&#10;                FOREIGN KEY (created_by_user_id) REFERENCES users(user_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create audit_trail table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE audit_trail (&#10;                audit_id SERIAL PRIMARY KEY,&#10;                payment_id INTEGER NOT NULL,&#10;                user_id INTEGER NOT NULL,&#10;                action VARCHAR(50) NOT NULL,&#10;                change_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;                old_value TEXT,&#10;                new_value TEXT,&#10;                FOREIGN KEY (payment_id) REFERENCES payments(payment_id),&#10;                FOREIGN KEY (user_id) REFERENCES users(user_id)&#10;            )&#10;            &quot;&quot;&quot;&#10;        };&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            for (String query : createTableQueries) {&#10;                stmt.executeUpdate(query);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void insertDefaultData(Connection conn) throws SQLException {&#10;        String[] insertQueries = {&#10;                // Insert roles&#10;                &quot;&quot;&quot;&#10;            INSERT INTO roles (role_name) VALUES &#10;            ('admin'),&#10;            ('finance_manager'),&#10;            ('viewer')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert categories&#10;                &quot;&quot;&quot;&#10;            INSERT INTO categories (category_name) VALUES &#10;            ('Office Supplies'),&#10;            ('Travel'),&#10;            ('Equipment'),&#10;            ('Software'),&#10;            ('Utilities')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert status&#10;                &quot;&quot;&quot;&#10;            INSERT INTO status (status_name) VALUES &#10;            ('PENDING'),&#10;            ('APPROVED'),&#10;            ('REJECTED')&#10;            &quot;&quot;&quot;&#10;        };&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            for (String query : insertQueries) {&#10;                stmt.executeUpdate(query);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void createIndexes(Connection conn) throws SQLException {&#10;        String[] indexQueries = {&#10;                &quot;CREATE INDEX idx_payments_created_by ON payments(created_by_user_id)&quot;,&#10;                &quot;CREATE INDEX idx_payments_status ON payments(status_id)&quot;,&#10;                &quot;CREATE INDEX idx_payments_date ON payments(payment_date)&quot;,&#10;                &quot;CREATE INDEX idx_audit_trail_payment ON audit_trail(payment_id)&quot;&#10;        };&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            for (String query : indexQueries) {&#10;                stmt.executeUpdate(query);&#10;            }&#10;        }&#10;    }&#10;&#10;    public Connection getConnection() throws SQLException {&#10;        try {&#10;            Connection connection = connectionPool.take();&#10;            if (connection.isClosed()) {&#10;                connection = createNewConnection();&#10;            }&#10;            return connection;&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;            throw new SQLException(&quot;Interrupted while waiting for connection&quot;, e);&#10;        }&#10;    }&#10;&#10;    public void returnConnection(Connection connection) {&#10;        if (connection != null) {&#10;            try {&#10;                if (!connection.isClosed()) {&#10;                    connectionPool.offer(connection);&#10;                }&#10;            } catch (SQLException e) {&#10;                System.err.println(&quot;Error returning connection to pool: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private Connection createNewConnection() throws SQLException {&#10;        String url = properties.getProperty(&quot;db.url&quot;);&#10;        String username = properties.getProperty(&quot;db.username&quot;);&#10;        String password = properties.getProperty(&quot;db.password&quot;);&#10;        return DriverManager.getConnection(url, username, password);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.config;&#10;&#10;import org.paymentmanagementsystem.util.DatabaseInitializer;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;import java.util.Properties;&#10;import java.util.concurrent.ArrayBlockingQueue;&#10;import java.util.concurrent.BlockingQueue;&#10;&#10;public class DatabaseConfig {&#10;    private static final String PROPERTIES_FILE = &quot;/database.properties&quot;;&#10;    private static DatabaseConfig instance;&#10;    private final Properties properties;&#10;    private final BlockingQueue&lt;Connection&gt; connectionPool;&#10;&#10;    private DatabaseConfig() throws SQLException, IOException {&#10;        properties = loadProperties();&#10;        &#10;        // Use DatabaseInitializer for complete database setup&#10;        try {&#10;            DatabaseInitializer.initializeDatabase(properties);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;Database driver not found&quot;, e);&#10;        }&#10;        &#10;        int poolSize = Integer.parseInt(properties.getProperty(&quot;db.pool.size&quot;, &quot;10&quot;));&#10;        connectionPool = new ArrayBlockingQueue&lt;&gt;(poolSize);&#10;        initializePool(poolSize);&#10;    }&#10;&#10;    public static synchronized DatabaseConfig getInstance() throws SQLException, IOException {&#10;        if (instance == null) {&#10;            instance = new DatabaseConfig();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private Properties loadProperties() throws IOException {&#10;        Properties props = new Properties();&#10;        try (InputStream input = getClass().getResourceAsStream(PROPERTIES_FILE)) {&#10;            if (input == null) {&#10;                throw new IOException(&quot;Unable to find &quot; + PROPERTIES_FILE);&#10;            }&#10;            props.load(input);&#10;        }&#10;        return props;&#10;    }&#10;&#10;    private void initializePool(int poolSize) throws SQLException {&#10;        String url = properties.getProperty(&quot;db.url&quot;);&#10;        String username = properties.getProperty(&quot;db.username&quot;);&#10;        String password = properties.getProperty(&quot;db.password&quot;);&#10;&#10;        for (int i = 0; i &lt; poolSize; i++) {&#10;            Connection connection = DriverManager.getConnection(url, username, password);&#10;            connectionPool.offer(connection);&#10;        }&#10;    }&#10;&#10;    public Connection getConnection() throws SQLException {&#10;        try {&#10;            return connectionPool.take();&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;            throw new SQLException(&quot;Connection pool interrupted&quot;, e);&#10;        }&#10;    }&#10;&#10;    public void returnConnection(Connection connection) {&#10;        if (connection != null) {&#10;            try {&#10;                if (!connection.isClosed()) {&#10;                    connectionPool.offer(connection);&#10;                }&#10;            } catch (SQLException e) {&#10;                System.err.println(&quot;Error returning connection to pool: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    public void closeAllConnections() {&#10;        while (!connectionPool.isEmpty()) {&#10;            try {&#10;                Connection conn = connectionPool.poll();&#10;                if (conn != null &amp;&amp; !conn.isClosed()) {&#10;                    conn.close();&#10;                }&#10;            } catch (SQLException e) {&#10;                System.err.println(&quot;Error closing connection: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/controller/AdminController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/controller/AdminController.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.controller;&#10;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.Team;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.TeamRepository;&#10;import org.paymentmanagementsystem.repository.UserRepository;&#10;import org.paymentmanagementsystem.service.PaymentService;&#10;import org.paymentmanagementsystem.service.SalaryService;&#10;&#10;import java.io.IOException;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class AdminController {&#10;    private final PaymentService paymentService;&#10;    private final Scanner scanner;&#10;&#10;    public AdminController() throws SQLException, IOException {&#10;        this.paymentService = new PaymentService();&#10;        this.scanner = new Scanner(System.in);&#10;    }&#10;&#10;    public void handleApprovePayment(User currentUser) {&#10;        System.out.println(&quot;\n=== APPROVE PAYMENT ===&quot;);&#10;        System.out.print(&quot;Enter Payment ID to approve: &quot;);&#10;&#10;        try {&#10;            int paymentId = Integer.parseInt(scanner.nextLine());&#10;&#10;            CompletableFuture&lt;Void&gt; future = paymentService.approvePayment(paymentId, currentUser);&#10;            future.get();&#10;&#10;            System.out.println(&quot;Payment approved successfully!&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error approving payment: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleRejectPayment(User currentUser) {&#10;        System.out.println(&quot;\n=== REJECT PAYMENT ===&quot;);&#10;        System.out.print(&quot;Enter Payment ID to reject: &quot;);&#10;&#10;        try {&#10;            int paymentId = Integer.parseInt(scanner.nextLine());&#10;&#10;            CompletableFuture&lt;Void&gt; future = paymentService.rejectPayment(paymentId, currentUser);&#10;            future.get();&#10;&#10;            System.out.println(&quot;Payment rejected successfully!&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error rejecting payment: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleDeletePayment(User currentUser) {&#10;        System.out.println(&quot;\n=== DELETE PAYMENT ===&quot;);&#10;        System.out.print(&quot;Enter Payment ID to delete: &quot;);&#10;&#10;        try {&#10;            int paymentId = Integer.parseInt(scanner.nextLine());&#10;&#10;            System.out.print(&quot;Are you sure you want to delete this payment? (y/N): &quot;);&#10;            String confirmation = scanner.nextLine();&#10;&#10;            if (confirmation.equalsIgnoreCase(&quot;y&quot;)) {&#10;                CompletableFuture&lt;Void&gt; future = paymentService.deletePayment(paymentId, currentUser);&#10;                future.get();&#10;&#10;                System.out.println(&quot;Payment deleted successfully!&quot;);&#10;            } else {&#10;                System.out.println(&quot;Delete operation cancelled.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error deleting payment: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Team Management Methods&#10;    public void handleCreateTeam(User currentUser) {&#10;        try {&#10;            System.out.println(&quot;\n=== CREATE TEAM ===&quot;);&#10;            System.out.print(&quot;Enter team name: &quot;);&#10;            String teamName = scanner.nextLine().trim();&#10;&#10;            if (teamName.isEmpty()) {&#10;                System.out.println(&quot;Team name cannot be empty.&quot;);&#10;                return;&#10;            }&#10;&#10;            // Check if team name already exists&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            if (teamRepo.findByName(teamName) != null) {&#10;                System.out.println(&quot;Team name already exists. Please choose a different name.&quot;);&#10;                return;&#10;            }&#10;&#10;            Team team = new Team(teamName, currentUser.getUserId());&#10;            Team createdTeam = teamRepo.createTeam(team);&#10;&#10;            if (createdTeam != null) {&#10;                System.out.println(&quot;✓ Team '&quot; + teamName + &quot;' created successfully!&quot;);&#10;                System.out.println(&quot;Team ID: &quot; + createdTeam.getTeamId());&#10;            } else {&#10;                System.out.println(&quot;Failed to create team.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error creating team: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleManageTeamMembers(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            List&lt;Team&gt; myTeams = teamRepo.findByCreatedBy(currentUser.getUserId());&#10;&#10;            if (myTeams.isEmpty()) {&#10;                System.out.println(&quot;You haven't created any teams yet. Create a team first.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.println(&quot;\n=== MANAGE TEAM MEMBERS ===&quot;);&#10;            System.out.println(&quot;Your teams:&quot;);&#10;            for (int i = 0; i &lt; myTeams.size(); i++) {&#10;                System.out.println((i + 1) + &quot;. &quot; + myTeams.get(i).getTeamName());&#10;            }&#10;&#10;            System.out.print(&quot;Select team (enter number): &quot;);&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            if (choice &lt; 1 || choice &gt; myTeams.size()) {&#10;                System.out.println(&quot;Invalid selection.&quot;);&#10;                return;&#10;            }&#10;&#10;            Team selectedTeam = myTeams.get(choice - 1);&#10;            manageTeamMembersMenu(selectedTeam);&#10;&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error managing team members: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void manageTeamMembersMenu(Team team) throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;&#10;        while (true) {&#10;            System.out.println(&quot;\n=== TEAM: &quot; + team.getTeamName() + &quot; ===&quot;);&#10;            System.out.println(&quot;1. View Team Members&quot;);&#10;            System.out.println(&quot;2. Add Viewer to Team&quot;);&#10;            System.out.println(&quot;3. Remove Member from Team&quot;);&#10;            System.out.println(&quot;4. Back to Main Menu&quot;);&#10;            System.out.print(&quot;Choose option: &quot;);&#10;&#10;            try {&#10;                int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;                switch (choice) {&#10;                    case 1:&#10;                        viewTeamMembers(team, userRepo);&#10;                        break;&#10;                    case 2:&#10;                        addViewerToTeam(team, userRepo);&#10;                        break;&#10;                    case 3:&#10;                        removeMemberFromTeam(team, userRepo);&#10;                        break;&#10;                    case 4:&#10;                        return;&#10;                    default:&#10;                        System.out.println(&quot;Invalid option.&quot;);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&quot;Please enter a valid number.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void viewTeamMembers(Team team, UserRepository userRepo) throws Exception {&#10;        List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;&#10;        System.out.println(&quot;\n=== TEAM MEMBERS ===&quot;);&#10;        if (members.isEmpty()) {&#10;            System.out.println(&quot;No members in this team yet.&quot;);&#10;        } else {&#10;            for (User member : members) {&#10;                System.out.println(&quot;• &quot; + member.getName() + &quot; (&quot; + member.getEmail() + &quot;) - &quot; +&#10;                        member.getRole().getRoleName());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void addViewerToTeam(Team team, UserRepository userRepo) throws Exception {&#10;        System.out.print(&quot;Enter viewer's email: &quot;);&#10;        String email = scanner.nextLine().trim();&#10;&#10;        var userOptional = userRepo.findByEmail(email);&#10;        if (userOptional.isEmpty()) {&#10;            System.out.println(&quot;User not found with email: &quot; + email);&#10;            return;&#10;        }&#10;&#10;        User user = userOptional.get();&#10;&#10;        // Check if user is a viewer&#10;        if (!&quot;viewer&quot;.equals(user.getRole().getRoleName())) {&#10;            System.out.println(&quot;Only viewers can be added to teams.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Check if user is already in a team&#10;        if (user.getTeamId() != null) {&#10;            System.out.println(&quot;User is already assigned to a team.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (userRepo.assignUserToTeam(user.getUserId(), team.getTeamId())) {&#10;            System.out.println(&quot;✓ &quot; + user.getName() + &quot; added to team successfully!&quot;);&#10;        } else {&#10;            System.out.println(&quot;Failed to add user to team.&quot;);&#10;        }&#10;    }&#10;&#10;    private void removeMemberFromTeam(Team team, UserRepository userRepo) throws Exception {&#10;        List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;&#10;        if (members.isEmpty()) {&#10;            System.out.println(&quot;No members in this team to remove.&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;\n=== REMOVE TEAM MEMBER ===&quot;);&#10;        for (int i = 0; i &lt; members.size(); i++) {&#10;            User member = members.get(i);&#10;            System.out.println((i + 1) + &quot;. &quot; + member.getName() + &quot; (&quot; + member.getEmail() + &quot;)&quot;);&#10;        }&#10;&#10;        System.out.print(&quot;Select member to remove (enter number): &quot;);&#10;        int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;        if (choice &lt; 1 || choice &gt; members.size()) {&#10;            System.out.println(&quot;Invalid selection.&quot;);&#10;            return;&#10;        }&#10;&#10;        User memberToRemove = members.get(choice - 1);&#10;&#10;        if (userRepo.assignUserToTeam(memberToRemove.getUserId(), null)) {&#10;            System.out.println(&quot;✓ &quot; + memberToRemove.getName() + &quot; removed from team successfully!&quot;);&#10;        } else {&#10;            System.out.println(&quot;Failed to remove member from team.&quot;);&#10;        }&#10;    }&#10;&#10;    public void handleViewMyTeams(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            List&lt;Team&gt; myTeams = teamRepo.findByCreatedBy(currentUser.getUserId());&#10;&#10;            System.out.println(&quot;\n=== MY TEAMS ===&quot;);&#10;            if (myTeams.isEmpty()) {&#10;                System.out.println(&quot;You haven't created any teams yet.&quot;);&#10;            } else {&#10;                for (Team team : myTeams) {&#10;                    System.out.println(&quot;• &quot; + team.getTeamName() + &quot; (Created: &quot; +&#10;                            team.getCreatedDate().toLocalDate() + &quot;)&quot;);&#10;&#10;                    // Show team member count&#10;                    UserRepository userRepo = new UserRepository();&#10;                    List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;                    System.out.println(&quot;  Members: &quot; + members.size());&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error viewing teams: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Admin-specific team viewing methods&#10;    public void handleViewAllTeams(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            UserRepository userRepo = new UserRepository();&#10;            List&lt;Team&gt; allTeams = teamRepo.findAll();&#10;&#10;            System.out.println(&quot;\n=== ALL TEAMS (ADMIN VIEW) ===&quot;);&#10;            if (allTeams.isEmpty()) {&#10;                System.out.println(&quot;No teams have been created yet.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Total teams: &quot; + allTeams.size());&#10;                System.out.println();&#10;&#10;                for (Team team : allTeams) {&#10;                    System.out.println(&quot; Team: &quot; + team.getTeamName());&#10;                    System.out.println(&quot;   Team ID: &quot; + team.getTeamId());&#10;                    System.out.println(&quot;   Created: &quot; + team.getCreatedDate().toLocalDate());&#10;&#10;                    // Get creator information&#10;                    try {&#10;                        var creatorOptional = userRepo.findByEmail(getUserEmailById(team.getCreatedByUserId(), userRepo));&#10;                        if (creatorOptional.isPresent()) {&#10;                            User creator = creatorOptional.get();&#10;                            System.out.println(&quot;   Created by: &quot; + creator.getName() + &quot; (&quot; + creator.getRole().getRoleName() + &quot;)&quot;);&#10;                        }&#10;                    } catch (Exception e) {&#10;                        System.out.println(&quot;   Created by: User ID &quot; + team.getCreatedByUserId());&#10;                    }&#10;&#10;                    // Get team member count&#10;                    List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;                    System.out.println(&quot;   Members: &quot; + members.size());&#10;&#10;                    if (!members.isEmpty()) {&#10;                        System.out.println(&quot;   Team Members:&quot;);&#10;                        for (User member : members) {&#10;                            System.out.println(&quot;     • &quot; + member.getName() + &quot; (&quot; + member.getEmail() + &quot;)&quot;);&#10;                        }&#10;                    }&#10;                    System.out.println();&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error viewing all teams: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleViewTeamMembers(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            List&lt;Team&gt; allTeams = teamRepo.findAll();&#10;&#10;            if (allTeams.isEmpty()) {&#10;                System.out.println(&quot;No teams have been created yet.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.println(&quot;\n=== SELECT TEAM TO VIEW MEMBERS ===&quot;);&#10;            for (int i = 0; i &lt; allTeams.size(); i++) {&#10;                System.out.println((i + 1) + &quot;. &quot; + allTeams.get(i).getTeamName() +&#10;                                 &quot; (ID: &quot; + allTeams.get(i).getTeamId() + &quot;)&quot;);&#10;            }&#10;            System.out.println((allTeams.size() + 1) + &quot;. View All Users by Role&quot;);&#10;            System.out.println((allTeams.size() + 2) + &quot;. Back to Main Menu&quot;);&#10;&#10;            System.out.print(&quot;Select option: &quot;);&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            if (choice &gt;= 1 &amp;&amp; choice &lt;= allTeams.size()) {&#10;                Team selectedTeam = allTeams.get(choice - 1);&#10;                viewDetailedTeamMembers(selectedTeam);&#10;            } else if (choice == allTeams.size() + 1) {&#10;                viewAllUsersByRole();&#10;            } else if (choice == allTeams.size() + 2) {&#10;                return;&#10;            } else {&#10;                System.out.println(&quot;Invalid selection.&quot;);&#10;            }&#10;&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error viewing team members: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void viewDetailedTeamMembers(Team team) throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;        List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;&#10;        System.out.println(&quot;\n=== TEAM: &quot; + team.getTeamName() + &quot; - DETAILED VIEW ===&quot;);&#10;        System.out.println(&quot;Team ID: &quot; + team.getTeamId());&#10;        System.out.println(&quot;Created: &quot; + team.getCreatedDate());&#10;&#10;        // Get creator information&#10;        try {&#10;            String creatorEmail = getUserEmailById(team.getCreatedByUserId(), userRepo);&#10;            var creatorOptional = userRepo.findByEmail(creatorEmail);&#10;            if (creatorOptional.isPresent()) {&#10;                User creator = creatorOptional.get();&#10;                System.out.println(&quot;Created by: &quot; + creator.getName() + &quot; (&quot; + creator.getEmail() + &quot;)&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Created by: User ID &quot; + team.getCreatedByUserId());&#10;        }&#10;&#10;        System.out.println(&quot;\nTeam Members (&quot; + members.size() + &quot;):&quot;);&#10;        if (members.isEmpty()) {&#10;            System.out.println(&quot;No members in this team yet.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-20s %-30s %-15s %-15s%n&quot;, &quot;Name&quot;, &quot;Email&quot;, &quot;Role&quot;, &quot;User ID&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(80));&#10;            for (User member : members) {&#10;                System.out.printf(&quot;%-20s %-30s %-15s %-15s%n&quot;,&#10;                    member.getName(),&#10;                    member.getEmail(),&#10;                    member.getRole().getRoleName(),&#10;                    member.getUserId());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void viewAllUsersByRole() throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;        List&lt;User&gt; allUsers = userRepo.findAll();&#10;&#10;        System.out.println(&quot;\n=== ALL USERS BY ROLE ===&quot;);&#10;&#10;        // Group users by role&#10;        var adminUsers = allUsers.stream().filter(u -&gt; &quot;admin&quot;.equals(u.getRole().getRoleName())).toList();&#10;        var financeManagers = allUsers.stream().filter(u -&gt; &quot;finance_manager&quot;.equals(u.getRole().getRoleName())).toList();&#10;        var viewers = allUsers.stream().filter(u -&gt; &quot;viewer&quot;.equals(u.getRole().getRoleName())).toList();&#10;&#10;        System.out.println(&quot;\n ADMINISTRATORS (&quot; + adminUsers.size() + &quot;):&quot;);&#10;        if (adminUsers.isEmpty()) {&#10;            System.out.println(&quot;  No admin users found.&quot;);&#10;        } else {&#10;            for (User user : adminUsers) {&#10;                System.out.println(&quot;  • &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot;);&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;\n FINANCE MANAGERS (&quot; + financeManagers.size() + &quot;):&quot;);&#10;        if (financeManagers.isEmpty()) {&#10;            System.out.println(&quot;  No finance managers found.&quot;);&#10;        } else {&#10;            for (User user : financeManagers) {&#10;                String teamInfo = user.getTeamId() != null ? &quot; [Team: &quot; + user.getTeamId() + &quot;]&quot; : &quot; [No team]&quot;;&#10;                System.out.println(&quot;  • &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot; + teamInfo);&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;\n VIEWERS (&quot; + viewers.size() + &quot;):&quot;);&#10;        if (viewers.isEmpty()) {&#10;            System.out.println(&quot;  No viewers found.&quot;);&#10;        } else {&#10;            for (User user : viewers) {&#10;                String teamInfo = user.getTeamId() != null ? &quot; [Team: &quot; + user.getTeamId() + &quot;]&quot; : &quot; [No team assigned]&quot;;&#10;                System.out.println(&quot;  • &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot; + teamInfo);&#10;            }&#10;        }&#10;    }&#10;&#10;    // Salary Management Methods&#10;    public void handleManageSalaries(User currentUser) {&#10;        try {&#10;            while (true) {&#10;                System.out.println(&quot;\n=== SALARY MANAGEMENT ===&quot;);&#10;                System.out.println(&quot;1. View All Users with Salaries&quot;);&#10;                System.out.println(&quot;2. Set/Update User Salary&quot;);&#10;                System.out.println(&quot;3. View Salary Payments History&quot;);&#10;                System.out.println(&quot;4. Back to Main Menu&quot;);&#10;                System.out.print(&quot;Choose option: &quot;);&#10;&#10;                int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;                switch (choice) {&#10;                    case 1:&#10;                        viewUsersWithSalaries();&#10;                        break;&#10;                    case 2:&#10;                        setUserSalary();&#10;                        break;&#10;                    case 3:&#10;                        viewSalaryPaymentsHistory();&#10;                        break;&#10;                    case 4:&#10;                        return;&#10;                    default:&#10;                        System.out.println(&quot;Invalid option.&quot;);&#10;                }&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error in salary management: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void viewUsersWithSalaries() throws Exception {&#10;        SalaryService salaryService = new SalaryService();&#10;        List&lt;User&gt; usersWithSalary = salaryService.getUsersWithSalary();&#10;&#10;        System.out.println(&quot;\n=== USERS WITH SALARIES ===&quot;);&#10;        if (usersWithSalary.isEmpty()) {&#10;            System.out.println(&quot;No users have salary configured yet.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-20s %-30s %-15s %-15s %-15s%n&quot;,&#10;                &quot;Name&quot;, &quot;Email&quot;, &quot;Role&quot;, &quot;Monthly Salary&quot;, &quot;Effective Date&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(95));&#10;&#10;            for (User user : usersWithSalary) {&#10;                System.out.printf(&quot;%-20s %-30s %-15s $%-14s %-15s%n&quot;,&#10;                    user.getName(),&#10;                    user.getEmail(),&#10;                    user.getRole().getRoleName(),&#10;                    user.getMonthlySalary(),&#10;                    user.getSalaryEffectiveDate() != null ? user.getSalaryEffectiveDate().toString() : &quot;Not set&quot;&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    private void setUserSalary() throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;        SalaryService salaryService = new SalaryService();&#10;&#10;        System.out.println(&quot;\n=== SET/UPDATE USER SALARY ===&quot;);&#10;        System.out.print(&quot;Enter user email: &quot;);&#10;        String email = scanner.nextLine().trim();&#10;&#10;        var userOptional = userRepo.findByEmail(email);&#10;        if (userOptional.isEmpty()) {&#10;            System.out.println(&quot;User not found with email: &quot; + email);&#10;            return;&#10;        }&#10;&#10;        User user = userOptional.get();&#10;&#10;        // Check if user is a viewer (only viewers should have salary)&#10;        if (!&quot;viewer&quot;.equals(user.getRole().getRoleName())) {&#10;            System.out.println(&quot;Only viewers can have salary configured.&quot;);&#10;            System.out.println(&quot;Current user role: &quot; + user.getRole().getRoleName());&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;User: &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot;);&#10;        System.out.println(&quot;Current salary: Rs&quot; + (user.getMonthlySalary() != null ? user.getMonthlySalary() : &quot;0.00&quot;));&#10;        System.out.println(&quot;Current effective date: &quot; + (user.getSalaryEffectiveDate() != null ? user.getSalaryEffectiveDate() : &quot;Not set&quot;));&#10;&#10;        System.out.print(&quot;Enter new monthly salary: Rs&quot;);&#10;        String salaryInput = scanner.nextLine().trim();&#10;&#10;        try {&#10;            BigDecimal monthlySalary = new BigDecimal(salaryInput);&#10;            if (monthlySalary.compareTo(BigDecimal.ZERO) &lt; 0) {&#10;                System.out.println(&quot;Salary cannot be negative.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.print(&quot;Enter effective date (YYYY-MM-DD) or press Enter for today: &quot;);&#10;            String dateInput = scanner.nextLine().trim();&#10;&#10;            LocalDate effectiveDate;&#10;            if (dateInput.isEmpty()) {&#10;                effectiveDate = LocalDate.now();&#10;            } else {&#10;                effectiveDate = LocalDate.parse(dateInput);&#10;            }&#10;&#10;            if (salaryService.updateUserSalary(user.getUserId(), monthlySalary, effectiveDate)) {&#10;                System.out.println(&quot;✓ Salary updated successfully!&quot;);&#10;                System.out.println(&quot;New salary: Rs&quot; + monthlySalary);&#10;                System.out.println(&quot;Effective date: &quot; + effectiveDate);&#10;            } else {&#10;                System.out.println(&quot;Failed to update salary.&quot;);&#10;            }&#10;&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Invalid salary amount. Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid date format. Please use YYYY-MM-DD format.&quot;);&#10;        }&#10;    }&#10;&#10;    private void viewSalaryPaymentsHistory() throws Exception {&#10;        PaymentRepository paymentRepo = new PaymentRepository();&#10;        List&lt;Payment&gt; allPayments = paymentRepo.findAll();&#10;&#10;        // Filter salary payments&#10;        List&lt;Payment&gt; salaryPayments = allPayments.stream()&#10;            .filter(p -&gt; &quot;SALARY&quot;.equals(p.getType()))&#10;            .toList();&#10;&#10;        System.out.println(&quot;\n=== SALARY PAYMENTS HISTORY ===&quot;);&#10;        if (salaryPayments.isEmpty()) {&#10;            System.out.println(&quot;No salary payments found.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-10s %-20s %-15s %-15s %-20s%n&quot;,&#10;                &quot;Payment ID&quot;, &quot;Employee&quot;, &quot;Amount&quot;, &quot;Status&quot;, &quot;Date&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(80));&#10;&#10;            for (Payment payment : salaryPayments) {&#10;                System.out.printf(&quot;%-10s %-20s $%-14s %-15s %-20s%n&quot;,&#10;                    payment.getPaymentId(),&#10;                    payment.getCreatedBy() != null ? payment.getCreatedBy().getName() : &quot;Unknown&quot;,&#10;                    payment.getAmount(),&#10;                    payment.getStatus() != null ? payment.getStatus().getStatusName() : &quot;Unknown&quot;,&#10;                    payment.getPaymentDate().toLocalDate()&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    public void handleGenerateMonthlySalaries(User currentUser) {&#10;        try {&#10;            System.out.println(&quot;\n=== GENERATE MONTHLY SALARY PAYMENTS ===&quot;);&#10;            System.out.println(&quot;This will generate salary payments for all eligible users for the current month.&quot;);&#10;            System.out.print(&quot;Do you want to proceed? (y/N): &quot;);&#10;&#10;            String confirmation = scanner.nextLine().trim();&#10;            if (!confirmation.equalsIgnoreCase(&quot;y&quot;)) {&#10;                System.out.println(&quot;Operation cancelled.&quot;);&#10;                return;&#10;            }&#10;&#10;            SalaryService salaryService = new SalaryService();&#10;            salaryService.generateMonthlySalaryPayments();&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error generating monthly salaries: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private String getUserEmailById(int userId, UserRepository userRepo) throws Exception {&#10;        // This is a helper method to get user email by ID&#10;        // Since we don't have a direct findById method, we'll use findAll and filter&#10;        List&lt;User&gt; allUsers = userRepo.findAll();&#10;        return allUsers.stream()&#10;                .filter(u -&gt; u.getUserId() == userId)&#10;                .map(User::getEmail)&#10;                .findFirst()&#10;                .orElse(&quot;unknown@unknown.com&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.controller;&#10;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.Team;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.TeamRepository;&#10;import org.paymentmanagementsystem.repository.UserRepository;&#10;import org.paymentmanagementsystem.service.PaymentService;&#10;import org.paymentmanagementsystem.service.SalaryService;&#10;import org.paymentmanagementsystem.service.ReportService;&#10;&#10;import java.io.IOException;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class AdminController {&#10;    private final PaymentService paymentService;&#10;    private final Scanner scanner;&#10;&#10;    public AdminController() throws SQLException, IOException {&#10;        this.paymentService = new PaymentService();&#10;        this.scanner = new Scanner(System.in);&#10;    }&#10;&#10;    public void handleApprovePayment(User currentUser) {&#10;        System.out.println(&quot;\n=== APPROVE PAYMENT ===&quot;);&#10;        System.out.print(&quot;Enter Payment ID to approve: &quot;);&#10;&#10;        try {&#10;            int paymentId = Integer.parseInt(scanner.nextLine());&#10;&#10;            CompletableFuture&lt;Void&gt; future = paymentService.approvePayment(paymentId, currentUser);&#10;            future.get();&#10;&#10;            System.out.println(&quot;Payment approved successfully!&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error approving payment: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleRejectPayment(User currentUser) {&#10;        System.out.println(&quot;\n=== REJECT PAYMENT ===&quot;);&#10;        System.out.print(&quot;Enter Payment ID to reject: &quot;);&#10;&#10;        try {&#10;            int paymentId = Integer.parseInt(scanner.nextLine());&#10;&#10;            CompletableFuture&lt;Void&gt; future = paymentService.rejectPayment(paymentId, currentUser);&#10;            future.get();&#10;&#10;            System.out.println(&quot;Payment rejected successfully!&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error rejecting payment: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleDeletePayment(User currentUser) {&#10;        System.out.println(&quot;\n=== DELETE PAYMENT ===&quot;);&#10;        System.out.print(&quot;Enter Payment ID to delete: &quot;);&#10;&#10;        try {&#10;            int paymentId = Integer.parseInt(scanner.nextLine());&#10;&#10;            System.out.print(&quot;Are you sure you want to delete this payment? (y/N): &quot;);&#10;            String confirmation = scanner.nextLine();&#10;&#10;            if (confirmation.equalsIgnoreCase(&quot;y&quot;)) {&#10;                CompletableFuture&lt;Void&gt; future = paymentService.deletePayment(paymentId, currentUser);&#10;                future.get();&#10;&#10;                System.out.println(&quot;Payment deleted successfully!&quot;);&#10;            } else {&#10;                System.out.println(&quot;Delete operation cancelled.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error deleting payment: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Team Management Methods&#10;    public void handleCreateTeam(User currentUser) {&#10;        try {&#10;            System.out.println(&quot;\n=== CREATE TEAM ===&quot;);&#10;            System.out.print(&quot;Enter team name: &quot;);&#10;            String teamName = scanner.nextLine().trim();&#10;&#10;            if (teamName.isEmpty()) {&#10;                System.out.println(&quot;Team name cannot be empty.&quot;);&#10;                return;&#10;            }&#10;&#10;            // Check if team name already exists&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            if (teamRepo.findByName(teamName) != null) {&#10;                System.out.println(&quot;Team name already exists. Please choose a different name.&quot;);&#10;                return;&#10;            }&#10;&#10;            Team team = new Team(teamName, currentUser.getUserId());&#10;            Team createdTeam = teamRepo.createTeam(team);&#10;&#10;            if (createdTeam != null) {&#10;                System.out.println(&quot;✓ Team '&quot; + teamName + &quot;' created successfully!&quot;);&#10;                System.out.println(&quot;Team ID: &quot; + createdTeam.getTeamId());&#10;            } else {&#10;                System.out.println(&quot;Failed to create team.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error creating team: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleManageTeamMembers(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            List&lt;Team&gt; myTeams = teamRepo.findByCreatedBy(currentUser.getUserId());&#10;&#10;            if (myTeams.isEmpty()) {&#10;                System.out.println(&quot;You haven't created any teams yet. Create a team first.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.println(&quot;\n=== MANAGE TEAM MEMBERS ===&quot;);&#10;            System.out.println(&quot;Your teams:&quot;);&#10;            for (int i = 0; i &lt; myTeams.size(); i++) {&#10;                System.out.println((i + 1) + &quot;. &quot; + myTeams.get(i).getTeamName());&#10;            }&#10;&#10;            System.out.print(&quot;Select team (enter number): &quot;);&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            if (choice &lt; 1 || choice &gt; myTeams.size()) {&#10;                System.out.println(&quot;Invalid selection.&quot;);&#10;                return;&#10;            }&#10;&#10;            Team selectedTeam = myTeams.get(choice - 1);&#10;            manageTeamMembersMenu(selectedTeam);&#10;&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error managing team members: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void manageTeamMembersMenu(Team team) throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;&#10;        while (true) {&#10;            System.out.println(&quot;\n=== TEAM: &quot; + team.getTeamName() + &quot; ===&quot;);&#10;            System.out.println(&quot;1. View Team Members&quot;);&#10;            System.out.println(&quot;2. Add Viewer to Team&quot;);&#10;            System.out.println(&quot;3. Remove Member from Team&quot;);&#10;            System.out.println(&quot;4. Back to Main Menu&quot;);&#10;            System.out.print(&quot;Choose option: &quot;);&#10;&#10;            try {&#10;                int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;                switch (choice) {&#10;                    case 1:&#10;                        viewTeamMembers(team, userRepo);&#10;                        break;&#10;                    case 2:&#10;                        addViewerToTeam(team, userRepo);&#10;                        break;&#10;                    case 3:&#10;                        removeMemberFromTeam(team, userRepo);&#10;                        break;&#10;                    case 4:&#10;                        return;&#10;                    default:&#10;                        System.out.println(&quot;Invalid option.&quot;);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&quot;Please enter a valid number.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void viewTeamMembers(Team team, UserRepository userRepo) throws Exception {&#10;        List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;&#10;        System.out.println(&quot;\n=== TEAM MEMBERS ===&quot;);&#10;        if (members.isEmpty()) {&#10;            System.out.println(&quot;No members in this team yet.&quot;);&#10;        } else {&#10;            for (User member : members) {&#10;                System.out.println(&quot;• &quot; + member.getName() + &quot; (&quot; + member.getEmail() + &quot;) - &quot; +&#10;                        member.getRole().getRoleName());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void addViewerToTeam(Team team, UserRepository userRepo) throws Exception {&#10;        System.out.print(&quot;Enter viewer's email: &quot;);&#10;        String email = scanner.nextLine().trim();&#10;&#10;        var userOptional = userRepo.findByEmail(email);&#10;        if (userOptional.isEmpty()) {&#10;            System.out.println(&quot;User not found with email: &quot; + email);&#10;            return;&#10;        }&#10;&#10;        User user = userOptional.get();&#10;&#10;        // Check if user is a viewer&#10;        if (!&quot;viewer&quot;.equals(user.getRole().getRoleName())) {&#10;            System.out.println(&quot;Only viewers can be added to teams.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Check if user is already in a team&#10;        if (user.getTeamId() != null) {&#10;            System.out.println(&quot;User is already assigned to a team.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (userRepo.assignUserToTeam(user.getUserId(), team.getTeamId())) {&#10;            System.out.println(&quot;✓ &quot; + user.getName() + &quot; added to team successfully!&quot;);&#10;        } else {&#10;            System.out.println(&quot;Failed to add user to team.&quot;);&#10;        }&#10;    }&#10;&#10;    private void removeMemberFromTeam(Team team, UserRepository userRepo) throws Exception {&#10;        List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;&#10;        if (members.isEmpty()) {&#10;            System.out.println(&quot;No members in this team to remove.&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;\n=== REMOVE TEAM MEMBER ===&quot;);&#10;        for (int i = 0; i &lt; members.size(); i++) {&#10;            User member = members.get(i);&#10;            System.out.println((i + 1) + &quot;. &quot; + member.getName() + &quot; (&quot; + member.getEmail() + &quot;)&quot;);&#10;        }&#10;&#10;        System.out.print(&quot;Select member to remove (enter number): &quot;);&#10;        int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;        if (choice &lt; 1 || choice &gt; members.size()) {&#10;            System.out.println(&quot;Invalid selection.&quot;);&#10;            return;&#10;        }&#10;&#10;        User memberToRemove = members.get(choice - 1);&#10;&#10;        if (userRepo.assignUserToTeam(memberToRemove.getUserId(), null)) {&#10;            System.out.println(&quot;✓ &quot; + memberToRemove.getName() + &quot; removed from team successfully!&quot;);&#10;        } else {&#10;            System.out.println(&quot;Failed to remove member from team.&quot;);&#10;        }&#10;    }&#10;&#10;    public void handleViewMyTeams(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            List&lt;Team&gt; myTeams = teamRepo.findByCreatedBy(currentUser.getUserId());&#10;&#10;            System.out.println(&quot;\n=== MY TEAMS ===&quot;);&#10;            if (myTeams.isEmpty()) {&#10;                System.out.println(&quot;You haven't created any teams yet.&quot;);&#10;            } else {&#10;                for (Team team : myTeams) {&#10;                    System.out.println(&quot;• &quot; + team.getTeamName() + &quot; (Created: &quot; +&#10;                            team.getCreatedDate().toLocalDate() + &quot;)&quot;);&#10;&#10;                    // Show team member count&#10;                    UserRepository userRepo = new UserRepository();&#10;                    List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;                    System.out.println(&quot;  Members: &quot; + members.size());&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error viewing teams: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Admin-specific team viewing methods&#10;    public void handleViewAllTeams(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            UserRepository userRepo = new UserRepository();&#10;            List&lt;Team&gt; allTeams = teamRepo.findAll();&#10;&#10;            System.out.println(&quot;\n=== ALL TEAMS (ADMIN VIEW) ===&quot;);&#10;            if (allTeams.isEmpty()) {&#10;                System.out.println(&quot;No teams have been created yet.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Total teams: &quot; + allTeams.size());&#10;                System.out.println();&#10;&#10;                for (Team team : allTeams) {&#10;                    System.out.println(&quot; Team: &quot; + team.getTeamName());&#10;                    System.out.println(&quot;   Team ID: &quot; + team.getTeamId());&#10;                    System.out.println(&quot;   Created: &quot; + team.getCreatedDate().toLocalDate());&#10;&#10;                    // Get creator information&#10;                    try {&#10;                        var creatorOptional = userRepo.findByEmail(getUserEmailById(team.getCreatedByUserId(), userRepo));&#10;                        if (creatorOptional.isPresent()) {&#10;                            User creator = creatorOptional.get();&#10;                            System.out.println(&quot;   Created by: &quot; + creator.getName() + &quot; (&quot; + creator.getRole().getRoleName() + &quot;)&quot;);&#10;                        }&#10;                    } catch (Exception e) {&#10;                        System.out.println(&quot;   Created by: User ID &quot; + team.getCreatedByUserId());&#10;                    }&#10;&#10;                    // Get team member count&#10;                    List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;                    System.out.println(&quot;   Members: &quot; + members.size());&#10;&#10;                    if (!members.isEmpty()) {&#10;                        System.out.println(&quot;   Team Members:&quot;);&#10;                        for (User member : members) {&#10;                            System.out.println(&quot;     • &quot; + member.getName() + &quot; (&quot; + member.getEmail() + &quot;)&quot;);&#10;                        }&#10;                    }&#10;                    System.out.println();&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error viewing all teams: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void handleViewTeamMembers(User currentUser) {&#10;        try {&#10;            TeamRepository teamRepo = new TeamRepository();&#10;            List&lt;Team&gt; allTeams = teamRepo.findAll();&#10;&#10;            if (allTeams.isEmpty()) {&#10;                System.out.println(&quot;No teams have been created yet.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.println(&quot;\n=== SELECT TEAM TO VIEW MEMBERS ===&quot;);&#10;            for (int i = 0; i &lt; allTeams.size(); i++) {&#10;                System.out.println((i + 1) + &quot;. &quot; + allTeams.get(i).getTeamName() +&#10;                                 &quot; (ID: &quot; + allTeams.get(i).getTeamId() + &quot;)&quot;);&#10;            }&#10;            System.out.println((allTeams.size() + 1) + &quot;. View All Users by Role&quot;);&#10;            System.out.println((allTeams.size() + 2) + &quot;. Back to Main Menu&quot;);&#10;&#10;            System.out.print(&quot;Select option: &quot;);&#10;            int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;            if (choice &gt;= 1 &amp;&amp; choice &lt;= allTeams.size()) {&#10;                Team selectedTeam = allTeams.get(choice - 1);&#10;                viewDetailedTeamMembers(selectedTeam);&#10;            } else if (choice == allTeams.size() + 1) {&#10;                viewAllUsersByRole();&#10;            } else if (choice == allTeams.size() + 2) {&#10;                return;&#10;            } else {&#10;                System.out.println(&quot;Invalid selection.&quot;);&#10;            }&#10;&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error viewing team members: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void viewDetailedTeamMembers(Team team) throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;        List&lt;User&gt; members = userRepo.findByTeamId(team.getTeamId());&#10;&#10;        System.out.println(&quot;\n=== TEAM: &quot; + team.getTeamName() + &quot; - DETAILED VIEW ===&quot;);&#10;        System.out.println(&quot;Team ID: &quot; + team.getTeamId());&#10;        System.out.println(&quot;Created: &quot; + team.getCreatedDate());&#10;&#10;        // Get creator information&#10;        try {&#10;            String creatorEmail = getUserEmailById(team.getCreatedByUserId(), userRepo);&#10;            var creatorOptional = userRepo.findByEmail(creatorEmail);&#10;            if (creatorOptional.isPresent()) {&#10;                User creator = creatorOptional.get();&#10;                System.out.println(&quot;Created by: &quot; + creator.getName() + &quot; (&quot; + creator.getEmail() + &quot;)&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Created by: User ID &quot; + team.getCreatedByUserId());&#10;        }&#10;&#10;        System.out.println(&quot;\nTeam Members (&quot; + members.size() + &quot;):&quot;);&#10;        if (members.isEmpty()) {&#10;            System.out.println(&quot;No members in this team yet.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-20s %-30s %-15s %-15s%n&quot;, &quot;Name&quot;, &quot;Email&quot;, &quot;Role&quot;, &quot;User ID&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(80));&#10;            for (User member : members) {&#10;                System.out.printf(&quot;%-20s %-30s %-15s %-15s%n&quot;,&#10;                    member.getName(),&#10;                    member.getEmail(),&#10;                    member.getRole().getRoleName(),&#10;                    member.getUserId());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void viewAllUsersByRole() throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;        List&lt;User&gt; allUsers = userRepo.findAll();&#10;&#10;        System.out.println(&quot;\n=== ALL USERS BY ROLE ===&quot;);&#10;&#10;        // Group users by role&#10;        var adminUsers = allUsers.stream().filter(u -&gt; &quot;admin&quot;.equals(u.getRole().getRoleName())).toList();&#10;        var financeManagers = allUsers.stream().filter(u -&gt; &quot;finance_manager&quot;.equals(u.getRole().getRoleName())).toList();&#10;        var viewers = allUsers.stream().filter(u -&gt; &quot;viewer&quot;.equals(u.getRole().getRoleName())).toList();&#10;&#10;        System.out.println(&quot;\n ADMINISTRATORS (&quot; + adminUsers.size() + &quot;):&quot;);&#10;        if (adminUsers.isEmpty()) {&#10;            System.out.println(&quot;  No admin users found.&quot;);&#10;        } else {&#10;            for (User user : adminUsers) {&#10;                System.out.println(&quot;  • &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot;);&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;\n FINANCE MANAGERS (&quot; + financeManagers.size() + &quot;):&quot;);&#10;        if (financeManagers.isEmpty()) {&#10;            System.out.println(&quot;  No finance managers found.&quot;);&#10;        } else {&#10;            for (User user : financeManagers) {&#10;                String teamInfo = user.getTeamId() != null ? &quot; [Team: &quot; + user.getTeamId() + &quot;]&quot; : &quot; [No team]&quot;;&#10;                System.out.println(&quot;  • &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot; + teamInfo);&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;\n VIEWERS (&quot; + viewers.size() + &quot;):&quot;);&#10;        if (viewers.isEmpty()) {&#10;            System.out.println(&quot;  No viewers found.&quot;);&#10;        } else {&#10;            for (User user : viewers) {&#10;                String teamInfo = user.getTeamId() != null ? &quot; [Team: &quot; + user.getTeamId() + &quot;]&quot; : &quot; [No team assigned]&quot;;&#10;                System.out.println(&quot;  • &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot; + teamInfo);&#10;            }&#10;        }&#10;    }&#10;&#10;    // Salary Management Methods&#10;    public void handleManageSalaries(User currentUser) {&#10;        try {&#10;            while (true) {&#10;                System.out.println(&quot;\n=== SALARY MANAGEMENT ===&quot;);&#10;                System.out.println(&quot;1. View All Users with Salaries&quot;);&#10;                System.out.println(&quot;2. Set/Update User Salary&quot;);&#10;                System.out.println(&quot;3. View Salary Payments History&quot;);&#10;                System.out.println(&quot;4. Back to Main Menu&quot;);&#10;                System.out.print(&quot;Choose option: &quot;);&#10;&#10;                int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;                switch (choice) {&#10;                    case 1:&#10;                        viewUsersWithSalaries();&#10;                        break;&#10;                    case 2:&#10;                        setUserSalary();&#10;                        break;&#10;                    case 3:&#10;                        viewSalaryPaymentsHistory();&#10;                        break;&#10;                    case 4:&#10;                        return;&#10;                    default:&#10;                        System.out.println(&quot;Invalid option.&quot;);&#10;                }&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error in salary management: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void viewUsersWithSalaries() throws Exception {&#10;        SalaryService salaryService = new SalaryService();&#10;        List&lt;User&gt; usersWithSalary = salaryService.getUsersWithSalary();&#10;&#10;        System.out.println(&quot;\n=== USERS WITH SALARIES ===&quot;);&#10;        if (usersWithSalary.isEmpty()) {&#10;            System.out.println(&quot;No users have salary configured yet.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-20s %-30s %-15s %-15s %-15s%n&quot;,&#10;                &quot;Name&quot;, &quot;Email&quot;, &quot;Role&quot;, &quot;Monthly Salary&quot;, &quot;Effective Date&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(95));&#10;&#10;            for (User user : usersWithSalary) {&#10;                System.out.printf(&quot;%-20s %-30s %-15s $%-14s %-15s%n&quot;,&#10;                    user.getName(),&#10;                    user.getEmail(),&#10;                    user.getRole().getRoleName(),&#10;                    user.getMonthlySalary(),&#10;                    user.getSalaryEffectiveDate() != null ? user.getSalaryEffectiveDate().toString() : &quot;Not set&quot;&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    private void setUserSalary() throws Exception {&#10;        UserRepository userRepo = new UserRepository();&#10;        SalaryService salaryService = new SalaryService();&#10;&#10;        System.out.println(&quot;\n=== SET/UPDATE USER SALARY ===&quot;);&#10;        System.out.print(&quot;Enter user email: &quot;);&#10;        String email = scanner.nextLine().trim();&#10;&#10;        var userOptional = userRepo.findByEmail(email);&#10;        if (userOptional.isEmpty()) {&#10;            System.out.println(&quot;User not found with email: &quot; + email);&#10;            return;&#10;        }&#10;&#10;        User user = userOptional.get();&#10;&#10;        // Check if user is a viewer (only viewers should have salary)&#10;        if (!&quot;viewer&quot;.equals(user.getRole().getRoleName())) {&#10;            System.out.println(&quot;Only viewers can have salary configured.&quot;);&#10;            System.out.println(&quot;Current user role: &quot; + user.getRole().getRoleName());&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;User: &quot; + user.getName() + &quot; (&quot; + user.getEmail() + &quot;)&quot;);&#10;        System.out.println(&quot;Current salary: Rs&quot; + (user.getMonthlySalary() != null ? user.getMonthlySalary() : &quot;0.00&quot;));&#10;        System.out.println(&quot;Current effective date: &quot; + (user.getSalaryEffectiveDate() != null ? user.getSalaryEffectiveDate() : &quot;Not set&quot;));&#10;&#10;        System.out.print(&quot;Enter new monthly salary: Rs&quot;);&#10;        String salaryInput = scanner.nextLine().trim();&#10;&#10;        try {&#10;            BigDecimal monthlySalary = new BigDecimal(salaryInput);&#10;            if (monthlySalary.compareTo(BigDecimal.ZERO) &lt; 0) {&#10;                System.out.println(&quot;Salary cannot be negative.&quot;);&#10;                return;&#10;            }&#10;&#10;            System.out.print(&quot;Enter effective date (YYYY-MM-DD) or press Enter for today: &quot;);&#10;            String dateInput = scanner.nextLine().trim();&#10;&#10;            LocalDate effectiveDate;&#10;            if (dateInput.isEmpty()) {&#10;                effectiveDate = LocalDate.now();&#10;            } else {&#10;                effectiveDate = LocalDate.parse(dateInput);&#10;            }&#10;&#10;            if (salaryService.updateUserSalary(user.getUserId(), monthlySalary, effectiveDate)) {&#10;                System.out.println(&quot;✓ Salary updated successfully!&quot;);&#10;                System.out.println(&quot;New salary: Rs&quot; + monthlySalary);&#10;                System.out.println(&quot;Effective date: &quot; + effectiveDate);&#10;            } else {&#10;                System.out.println(&quot;Failed to update salary.&quot;);&#10;            }&#10;&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Invalid salary amount. Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Invalid date format. Please use YYYY-MM-DD format.&quot;);&#10;        }&#10;    }&#10;&#10;    private void viewSalaryPaymentsHistory() throws Exception {&#10;        PaymentRepository paymentRepo = new PaymentRepository();&#10;        List&lt;Payment&gt; allPayments = paymentRepo.findAll();&#10;&#10;        // Filter salary payments&#10;        List&lt;Payment&gt; salaryPayments = allPayments.stream()&#10;            .filter(p -&gt; &quot;SALARY&quot;.equals(p.getType()))&#10;            .toList();&#10;&#10;        System.out.println(&quot;\n=== SALARY PAYMENTS HISTORY ===&quot;);&#10;        if (salaryPayments.isEmpty()) {&#10;            System.out.println(&quot;No salary payments found.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-10s %-20s %-15s %-15s %-20s%n&quot;,&#10;                &quot;Payment ID&quot;, &quot;Employee&quot;, &quot;Amount&quot;, &quot;Status&quot;, &quot;Date&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(80));&#10;&#10;            for (Payment payment : salaryPayments) {&#10;                System.out.printf(&quot;%-10s %-20s $%-14s %-15s %-20s%n&quot;,&#10;                    payment.getPaymentId(),&#10;                    payment.getCreatedBy() != null ? payment.getCreatedBy().getName() : &quot;Unknown&quot;,&#10;                    payment.getAmount(),&#10;                    payment.getStatus() != null ? payment.getStatus().getStatusName() : &quot;Unknown&quot;,&#10;                    payment.getPaymentDate().toLocalDate()&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    public void handleGenerateMonthlySalaries(User currentUser) {&#10;        try {&#10;            System.out.println(&quot;\n=== GENERATE MONTHLY SALARY PAYMENTS ===&quot;);&#10;            System.out.println(&quot;This will generate salary payments for all eligible users for the current month.&quot;);&#10;            System.out.print(&quot;Do you want to proceed? (y/N): &quot;);&#10;&#10;            String confirmation = scanner.nextLine().trim();&#10;            if (!confirmation.equalsIgnoreCase(&quot;y&quot;)) {&#10;                System.out.println(&quot;Operation cancelled.&quot;);&#10;                return;&#10;            }&#10;&#10;            SalaryService salaryService = new SalaryService();&#10;            salaryService.generateMonthlySalaryPayments();&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error generating monthly salaries: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Report Generation Methods&#10;    public void handleGenerateReports(User currentUser) {&#10;        try {&#10;            while (true) {&#10;                System.out.println(&quot;\n=== REPORT GENERATION ===&quot;);&#10;                System.out.println(&quot;1. Generate Monthly Report&quot;);&#10;                System.out.println(&quot;2. Generate Quarterly Report&quot;);&#10;                System.out.println(&quot;3. Generate Current Month Report&quot;);&#10;                System.out.println(&quot;4. Generate Current Quarter Report&quot;);&#10;                System.out.println(&quot;5. Back to Main Menu&quot;);&#10;                System.out.print(&quot;Choose option: &quot;);&#10;&#10;                int choice = Integer.parseInt(scanner.nextLine());&#10;&#10;                switch (choice) {&#10;                    case 1:&#10;                        generateMonthlyReport();&#10;                        break;&#10;                    case 2:&#10;                        generateQuarterlyReport();&#10;                        break;&#10;                    case 3:&#10;                        generateCurrentMonthReport();&#10;                        break;&#10;                    case 4:&#10;                        generateCurrentQuarterReport();&#10;                        break;&#10;                    case 5:&#10;                        return;&#10;                    default:&#10;                        System.out.println(&quot;Invalid option.&quot;);&#10;                }&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            System.out.println(&quot;Please enter a valid number.&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error in report generation: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void generateMonthlyReport() throws Exception {&#10;        System.out.println(&quot;\n=== GENERATE MONTHLY REPORT ===&quot;);&#10;        System.out.print(&quot;Enter year (e.g., 2025): &quot;);&#10;        int year = Integer.parseInt(scanner.nextLine());&#10;        &#10;        System.out.print(&quot;Enter month (1-12): &quot;);&#10;        int month = Integer.parseInt(scanner.nextLine());&#10;        &#10;        if (month &lt; 1 || month &gt; 12) {&#10;            System.out.println(&quot;Invalid month. Please enter a number between 1 and 12.&quot;);&#10;            return;&#10;        }&#10;&#10;        ReportService reportService = new ReportService();&#10;        ReportService.MonthlyReport report = reportService.generateMonthlyReport(year, month);&#10;        &#10;        displayMonthlyReport(report);&#10;    }&#10;&#10;    private void generateQuarterlyReport() throws Exception {&#10;        System.out.println(&quot;\n=== GENERATE QUARTERLY REPORT ===&quot;);&#10;        System.out.print(&quot;Enter year (e.g., 2025): &quot;);&#10;        int year = Integer.parseInt(scanner.nextLine());&#10;        &#10;        System.out.print(&quot;Enter quarter (1-4): &quot;);&#10;        int quarter = Integer.parseInt(scanner.nextLine());&#10;        &#10;        if (quarter &lt; 1 || quarter &gt; 4) {&#10;            System.out.println(&quot;Invalid quarter. Please enter a number between 1 and 4.&quot;);&#10;            return;&#10;        }&#10;&#10;        ReportService reportService = new ReportService();&#10;        ReportService.QuarterlyReport report = reportService.generateQuarterlyReport(year, quarter);&#10;        &#10;        displayQuarterlyReport(report);&#10;    }&#10;&#10;    private void generateCurrentMonthReport() throws Exception {&#10;        System.out.println(&quot;\n=== CURRENT MONTH REPORT ===&quot;);&#10;        &#10;        ReportService reportService = new ReportService();&#10;        ReportService.MonthlyReport report = reportService.generateCurrentMonthReport();&#10;        &#10;        displayMonthlyReport(report);&#10;    }&#10;&#10;    private void generateCurrentQuarterReport() throws Exception {&#10;        System.out.println(&quot;\n=== CURRENT QUARTER REPORT ===&quot;);&#10;        &#10;        ReportService reportService = new ReportService();&#10;        ReportService.QuarterlyReport report = reportService.generateCurrentQuarterReport();&#10;        &#10;        displayQuarterlyReport(report);&#10;    }&#10;&#10;    private void displayMonthlyReport(ReportService.MonthlyReport report) {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(80));&#10;        System.out.println(&quot;                    MONTHLY PAYMENT REPORT&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(80));&#10;        System.out.println(&quot;Period: &quot; + report.getMonthName() + &quot; &quot; + report.getYear());&#10;        System.out.println(&quot;Generated on: &quot; + LocalDate.now());&#10;        System.out.println(&quot;-&quot;.repeat(80));&#10;        &#10;        // Summary&#10;        System.out.println(&quot;\n SUMMARY:&quot;);&#10;        System.out.println(&quot;Total Payments: &quot; + report.getTotalPayments());&#10;        System.out.println(&quot;Total Amount: $&quot; + report.getTotalAmount());&#10;        &#10;        // By Status&#10;        System.out.println(&quot;\n PAYMENTS BY STATUS:&quot;);&#10;        if (report.getPaymentsByStatus().isEmpty()) {&#10;            System.out.println(&quot;No payments found for this period.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-15s %-10s %-15s%n&quot;, &quot;Status&quot;, &quot;Count&quot;, &quot;Amount&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(40));&#10;            for (String status : report.getPaymentsByStatus().keySet()) {&#10;                int count = report.getPaymentsByStatus().get(status);&#10;                BigDecimal amount = report.getAmountsByStatus().getOrDefault(status, BigDecimal.ZERO);&#10;                System.out.printf(&quot;%-15s %-10d $%-14s%n&quot;, status, count, amount);&#10;            }&#10;        }&#10;        &#10;        // By Type&#10;        System.out.println(&quot;\n️ PAYMENTS BY TYPE:&quot;);&#10;        if (report.getPaymentsByType().isEmpty()) {&#10;            System.out.println(&quot;No payment types found.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-15s %-10s %-15s%n&quot;, &quot;Type&quot;, &quot;Count&quot;, &quot;Amount&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(40));&#10;            for (String type : report.getPaymentsByType().keySet()) {&#10;                int count = report.getPaymentsByType().get(type);&#10;                BigDecimal amount = report.getAmountsByType().getOrDefault(type, BigDecimal.ZERO);&#10;                System.out.printf(&quot;%-15s %-10d $%-14s%n&quot;, type, count, amount);&#10;            }&#10;        }&#10;        &#10;        // By Category&#10;        System.out.println(&quot;\n PAYMENTS BY CATEGORY:&quot;);&#10;        if (report.getPaymentsByCategory().isEmpty()) {&#10;            System.out.println(&quot;No categories found.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-20s %-10s %-15s%n&quot;, &quot;Category&quot;, &quot;Count&quot;, &quot;Amount&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(45));&#10;            for (String category : report.getPaymentsByCategory().keySet()) {&#10;                int count = report.getPaymentsByCategory().get(category);&#10;                BigDecimal amount = report.getAmountsByCategory().getOrDefault(category, BigDecimal.ZERO);&#10;                System.out.printf(&quot;%-20s %-10d $%-14s%n&quot;, category, count, amount);&#10;            }&#10;        }&#10;        &#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(80));&#10;    }&#10;&#10;    private void displayQuarterlyReport(ReportService.QuarterlyReport report) {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(80));&#10;        System.out.println(&quot;                   QUARTERLY PAYMENT REPORT&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(80));&#10;        System.out.println(&quot;Period: Q&quot; + report.getQuarter() + &quot; &quot; + report.getYear());&#10;        System.out.println(&quot;Date Range: &quot; + report.getStartDate() + &quot; to &quot; + report.getEndDate());&#10;        System.out.println(&quot;Generated on: &quot; + LocalDate.now());&#10;        System.out.println(&quot;-&quot;.repeat(80));&#10;        &#10;        // Summary&#10;        System.out.println(&quot;\n QUARTERLY SUMMARY:&quot;);&#10;        System.out.println(&quot;Total Payments: &quot; + report.getTotalPayments());&#10;        System.out.println(&quot;Total Amount: $&quot; + report.getTotalAmount());&#10;        &#10;        // Monthly Breakdown&#10;        System.out.println(&quot;\n MONTHLY BREAKDOWN:&quot;);&#10;        if (report.getMonthlyBreakdown().isEmpty()) {&#10;            System.out.println(&quot;No payments found for this quarter.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-12s %-10s %-15s%n&quot;, &quot;Month&quot;, &quot;Count&quot;, &quot;Amount&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(37));&#10;            for (String monthKey : report.getMonthlyBreakdown().keySet()) {&#10;                ReportService.MonthlyReport monthlyReport = report.getMonthlyBreakdown().get(monthKey);&#10;                System.out.printf(&quot;%-12s %-10d $%-14s%n&quot;, &#10;                    monthKey, &#10;                    monthlyReport.getTotalPayments(), &#10;                    monthlyReport.getTotalAmount());&#10;            }&#10;        }&#10;        &#10;        // By Status&#10;        System.out.println(&quot;\n QUARTERLY PAYMENTS BY STATUS:&quot;);&#10;        if (report.getPaymentsByStatus().isEmpty()) {&#10;            System.out.println(&quot;No payments found for this period.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-15s %-10s %-15s%n&quot;, &quot;Status&quot;, &quot;Count&quot;, &quot;Amount&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(40));&#10;            for (String status : report.getPaymentsByStatus().keySet()) {&#10;                int count = report.getPaymentsByStatus().get(status);&#10;                BigDecimal amount = report.getAmountsByStatus().getOrDefault(status, BigDecimal.ZERO);&#10;                System.out.printf(&quot;%-15s %-10d $%-14s%n&quot;, status, count, amount);&#10;            }&#10;        }&#10;        &#10;        // By Type&#10;        System.out.println(&quot;\n️ QUARTERLY PAYMENTS BY TYPE:&quot;);&#10;        if (report.getPaymentsByType().isEmpty()) {&#10;            System.out.println(&quot;No payment types found.&quot;);&#10;        } else {&#10;            System.out.printf(&quot;%-15s %-10s %-15s%n&quot;, &quot;Type&quot;, &quot;Count&quot;, &quot;Amount&quot;);&#10;            System.out.println(&quot;-&quot;.repeat(40));&#10;            for (String type : report.getPaymentsByType().keySet()) {&#10;                int count = report.getPaymentsByType().get(type);&#10;                BigDecimal amount = report.getAmountsByType().getOrDefault(type, BigDecimal.ZERO);&#10;                System.out.printf(&quot;%-15s %-10d $%-14s%n&quot;, type, count, amount);&#10;            }&#10;        }&#10;        &#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(80));&#10;    }&#10;&#10;    private String getUserEmailById(int userId, UserRepository userRepo) throws Exception {&#10;        // This is a helper method to get user email by ID&#10;        // Since we don't have a direct findById method, we'll use findAll and filter&#10;        List&lt;User&gt; allUsers = userRepo.findAll();&#10;        return allUsers.stream()&#10;                .filter(u -&gt; u.getUserId() == userId)&#10;                .map(User::getEmail)&#10;                .findFirst()&#10;                .orElse(&quot;unknown@unknown.com&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/model/Payment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/model/Payment.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class Payment {&#10;    private int paymentId;&#10;    private BigDecimal amount;&#10;    private String type;&#10;    private LocalDateTime paymentDate;&#10;    private String description;&#10;    private int categoryId;&#10;    private int statusId;&#10;    private int createdByUserId;&#10;&#10;    private Category category;&#10;    private Status status;&#10;    private User createdBy;&#10;&#10;    // Constructors&#10;    public Payment() {}&#10;&#10;    public Payment(BigDecimal amount, String type, String description,&#10;                   int categoryId, int statusId, int createdByUserId) {&#10;        this.amount = amount;&#10;        this.type = type;&#10;        this.description = description;&#10;        this.categoryId = categoryId;&#10;        this.statusId = statusId;&#10;        this.createdByUserId = createdByUserId;&#10;        this.paymentDate = LocalDateTime.now();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getPaymentId() { return paymentId; }&#10;    public void setPaymentId(int paymentId) { this.paymentId = paymentId; }&#10;&#10;    public BigDecimal getAmount() { return amount; }&#10;    public void setAmount(BigDecimal amount) { this.amount = amount; }&#10;&#10;    public String getType() { return type; }&#10;    public void setType(String type) { this.type = type; }&#10;&#10;    public LocalDateTime getPaymentDate() { return paymentDate; }&#10;    public void setPaymentDate(LocalDateTime paymentDate) { this.paymentDate = paymentDate; }&#10;&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;&#10;    public int getCategoryId() { return categoryId; }&#10;    public void setCategoryId(int categoryId) { this.categoryId = categoryId; }&#10;&#10;    public int getStatusId() { return statusId; }&#10;    public void setStatusId(int statusId) { this.statusId = statusId; }&#10;&#10;    public int getCreatedByUserId() { return createdByUserId; }&#10;    public void setCreatedByUserId(int createdByUserId) { this.createdByUserId = createdByUserId; }&#10;&#10;    public Category getCategory() { return category; }&#10;    public void setCategory(Category category) { this.category = category; }&#10;&#10;    public Status getStatus() { return status; }&#10;    public void setStatus(Status status) { this.status = status; }&#10;&#10;    public User getCreatedBy() { return createdBy; }&#10;    public void setCreatedBy(User createdBy) { this.createdBy = createdBy; }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class Payment {&#10;    private int paymentId;&#10;    private BigDecimal amount;&#10;    private String type;&#10;    private LocalDateTime paymentDate;&#10;    private String description;&#10;    private int categoryId;&#10;    private int statusId;&#10;    private int createdByUserId;&#10;    private Integer teamId; // Can be null for admin-created payments&#10;&#10;    private Category category;&#10;    private Status status;&#10;    private User createdBy;&#10;    private Team team;&#10;&#10;    // Constructors&#10;    public Payment() {}&#10;&#10;    public Payment(BigDecimal amount, String type, String description,&#10;                   int categoryId, int statusId, int createdByUserId) {&#10;        this.amount = amount;&#10;        this.type = type;&#10;        this.description = description;&#10;        this.categoryId = categoryId;&#10;        this.statusId = statusId;&#10;        this.createdByUserId = createdByUserId;&#10;        this.paymentDate = LocalDateTime.now();&#10;    }&#10;&#10;    public Payment(BigDecimal amount, String type, String description,&#10;                   int categoryId, int statusId, int createdByUserId, Integer teamId) {&#10;        this.amount = amount;&#10;        this.type = type;&#10;        this.description = description;&#10;        this.categoryId = categoryId;&#10;        this.statusId = statusId;&#10;        this.createdByUserId = createdByUserId;&#10;        this.teamId = teamId;&#10;        this.paymentDate = LocalDateTime.now();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getPaymentId() { return paymentId; }&#10;    public void setPaymentId(int paymentId) { this.paymentId = paymentId; }&#10;&#10;    public BigDecimal getAmount() { return amount; }&#10;    public void setAmount(BigDecimal amount) { this.amount = amount; }&#10;&#10;    public String getType() { return type; }&#10;    public void setType(String type) { this.type = type; }&#10;&#10;    public LocalDateTime getPaymentDate() { return paymentDate; }&#10;    public void setPaymentDate(LocalDateTime paymentDate) { this.paymentDate = paymentDate; }&#10;&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;&#10;    public int getCategoryId() { return categoryId; }&#10;    public void setCategoryId(int categoryId) { this.categoryId = categoryId; }&#10;&#10;    public int getStatusId() { return statusId; }&#10;    public void setStatusId(int statusId) { this.statusId = statusId; }&#10;&#10;    public int getCreatedByUserId() { return createdByUserId; }&#10;    public void setCreatedByUserId(int createdByUserId) { this.createdByUserId = createdByUserId; }&#10;&#10;    public Integer getTeamId() { return teamId; }&#10;    public void setTeamId(Integer teamId) { this.teamId = teamId; }&#10;&#10;    public Category getCategory() { return category; }&#10;    public void setCategory(Category category) { this.category = category; }&#10;&#10;    public Status getStatus() { return status; }&#10;    public void setStatus(Status status) { this.status = status; }&#10;&#10;    public User getCreatedBy() { return createdBy; }&#10;    public void setCreatedBy(User createdBy) { this.createdBy = createdBy; }&#10;&#10;    public Team getTeam() { return team; }&#10;    public void setTeam(Team team) { this.team = team; }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Payment{&quot; +&#10;                &quot;paymentId=&quot; + paymentId +&#10;                &quot;, amount=&quot; + amount +&#10;                &quot;, type='&quot; + type + '\'' +&#10;                &quot;, paymentDate=&quot; + paymentDate +&#10;                &quot;, description='&quot; + description + '\'' +&#10;                &quot;, categoryId=&quot; + categoryId +&#10;                &quot;, statusId=&quot; + statusId +&#10;                &quot;, createdByUserId=&quot; + createdByUserId +&#10;                &quot;, teamId=&quot; + teamId +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/model/Team.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/model/Team.java" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.model;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class Team {&#10;    private int teamId;&#10;    private String teamName;&#10;    private int createdByUserId;&#10;    private LocalDateTime createdDate;&#10;&#10;    // Constructors&#10;    public Team() {}&#10;&#10;    public Team(int teamId, String teamName, int createdByUserId, LocalDateTime createdDate) {&#10;        this.teamId = teamId;&#10;        this.teamName = teamName;&#10;        this.createdByUserId = createdByUserId;&#10;        this.createdDate = createdDate;&#10;    }&#10;&#10;    public Team(String teamName, int createdByUserId) {&#10;        this.teamName = teamName;&#10;        this.createdByUserId = createdByUserId;&#10;        this.createdDate = LocalDateTime.now();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getTeamId() {&#10;        return teamId;&#10;    }&#10;&#10;    public void setTeamId(int teamId) {&#10;        this.teamId = teamId;&#10;    }&#10;&#10;    public String getTeamName() {&#10;        return teamName;&#10;    }&#10;&#10;    public void setTeamName(String teamName) {&#10;        this.teamName = teamName;&#10;    }&#10;&#10;    public int getCreatedByUserId() {&#10;        return createdByUserId;&#10;    }&#10;&#10;    public void setCreatedByUserId(int createdByUserId) {&#10;        this.createdByUserId = createdByUserId;&#10;    }&#10;&#10;    public LocalDateTime getCreatedDate() {&#10;        return createdDate;&#10;    }&#10;&#10;    public void setCreatedDate(LocalDateTime createdDate) {&#10;        this.createdDate = createdDate;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Team{&quot; +&#10;                &quot;teamId=&quot; + teamId +&#10;                &quot;, teamName='&quot; + teamName + '\'' +&#10;                &quot;, createdByUserId=&quot; + createdByUserId +&#10;                &quot;, createdDate=&quot; + createdDate +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Team team = (Team) o;&#10;        return teamId == team.teamId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(teamId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/model/User.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.model;&#10;&#10;public class User {&#10;    private int userId;&#10;    private String name;&#10;    private String email;&#10;    private String passwordHash;&#10;    private int roleId;&#10;    private Role role;&#10;    private Integer teamId; // Can be null for admin users&#10;    private Team team;&#10;&#10;    public User() {}&#10;&#10;    public User(String name, String email, String passwordHash, int roleId) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.passwordHash = passwordHash;&#10;        this.roleId = roleId;&#10;    }&#10;&#10;    public User(String name, String email, String passwordHash, int roleId, Integer teamId) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.passwordHash = passwordHash;&#10;        this.roleId = roleId;&#10;        this.teamId = teamId;&#10;    }&#10;&#10;    public int getUserId() { return userId; }&#10;    public void setUserId(int userId) { this.userId = userId; }&#10;&#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;&#10;    public String getPasswordHash() { return passwordHash; }&#10;    public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }&#10;&#10;    public int getRoleId() { return roleId; }&#10;    public void setRoleId(int roleId) { this.roleId = roleId; }&#10;&#10;    public Role getRole() { return role; }&#10;    public void setRole(Role role) { this.role = role; }&#10;&#10;    public Integer getTeamId() { return teamId; }&#10;    public void setTeamId(Integer teamId) { this.teamId = teamId; }&#10;&#10;    public Team getTeam() { return team; }&#10;    public void setTeam(Team team) { this.team = team; }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;User{&quot; +&#10;                &quot;userId=&quot; + userId +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, roleId=&quot; + roleId +&#10;                &quot;, teamId=&quot; + teamId +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDate;&#10;&#10;public class User {&#10;    private int userId;&#10;    private String name;&#10;    private String email;&#10;    private String passwordHash;&#10;    private int roleId;&#10;    private Role role;&#10;    private Integer teamId; // Can be null for admin users&#10;    private Team team;&#10;    private BigDecimal monthlySalary; // Monthly salary for viewers&#10;    private LocalDate salaryEffectiveDate; // When salary starts&#10;&#10;    public User() {}&#10;&#10;    public User(String name, String email, String passwordHash, int roleId) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.passwordHash = passwordHash;&#10;        this.roleId = roleId;&#10;        this.monthlySalary = BigDecimal.ZERO;&#10;    }&#10;&#10;    public User(String name, String email, String passwordHash, int roleId, Integer teamId) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.passwordHash = passwordHash;&#10;        this.roleId = roleId;&#10;        this.teamId = teamId;&#10;        this.monthlySalary = BigDecimal.ZERO;&#10;    }&#10;&#10;    public User(String name, String email, String passwordHash, int roleId, Integer teamId, BigDecimal monthlySalary) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.passwordHash = passwordHash;&#10;        this.roleId = roleId;&#10;        this.teamId = teamId;&#10;        this.monthlySalary = monthlySalary != null ? monthlySalary : BigDecimal.ZERO;&#10;        this.salaryEffectiveDate = LocalDate.now();&#10;    }&#10;&#10;    public int getUserId() { return userId; }&#10;    public void setUserId(int userId) { this.userId = userId; }&#10;&#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;&#10;    public String getPasswordHash() { return passwordHash; }&#10;    public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }&#10;&#10;    public int getRoleId() { return roleId; }&#10;    public void setRoleId(int roleId) { this.roleId = roleId; }&#10;&#10;    public Role getRole() { return role; }&#10;    public void setRole(Role role) { this.role = role; }&#10;&#10;    public Integer getTeamId() { return teamId; }&#10;    public void setTeamId(Integer teamId) { this.teamId = teamId; }&#10;&#10;    public Team getTeam() { return team; }&#10;    public void setTeam(Team team) { this.team = team; }&#10;&#10;    public BigDecimal getMonthlySalary() { return monthlySalary; }&#10;    public void setMonthlySalary(BigDecimal monthlySalary) { &#10;        this.monthlySalary = monthlySalary != null ? monthlySalary : BigDecimal.ZERO; &#10;    }&#10;&#10;    public LocalDate getSalaryEffectiveDate() { return salaryEffectiveDate; }&#10;    public void setSalaryEffectiveDate(LocalDate salaryEffectiveDate) { &#10;        this.salaryEffectiveDate = salaryEffectiveDate; &#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;User{&quot; +&#10;                &quot;userId=&quot; + userId +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, roleId=&quot; + roleId +&#10;                &quot;, teamId=&quot; + teamId +&#10;                &quot;, monthlySalary=&quot; + monthlySalary +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/CategoryRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/CategoryRepository.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Category;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class CategoryRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public CategoryRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public List&lt;Category&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT category_id, category_name FROM categories&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Category&gt; categories = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                Category category = new Category();&#10;                category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;                categories.add(category);&#10;            }&#10;            return categories;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Category&gt; findById(int categoryId) throws SQLException {&#10;        String sql = &quot;SELECT category_id, category_name FROM categories WHERE category_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, categoryId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Category category = new Category();&#10;                category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;                return Optional.of(category);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Category save(Category category) throws SQLException {&#10;        String sql = &quot;INSERT INTO categories (category_name) VALUES (?) RETURNING category_id&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setString(1, category.getCategoryName());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;            }&#10;            return category;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Category;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class CategoryRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public CategoryRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public List&lt;Category&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT category_id, category_name FROM categories&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Category&gt; categories = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                Category category = new Category();&#10;                category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;                categories.add(category);&#10;            }&#10;            return categories;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Category&gt; findById(int categoryId) throws SQLException {&#10;        String sql = &quot;SELECT category_id, category_name FROM categories WHERE category_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, categoryId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Category category = new Category();&#10;                category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;                return Optional.of(category);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Category save(Category category) throws SQLException {&#10;        String sql = &quot;INSERT INTO categories (category_name) VALUES (?) RETURNING category_id&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setString(1, category.getCategoryName());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;            }&#10;            return category;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Category findByName(String categoryName) throws SQLException {&#10;        String sql = &quot;SELECT * FROM categories WHERE category_name = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, categoryName);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        Category category = new Category();&#10;                        category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                        category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;                        return category;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public Category createCategory(String categoryName) throws SQLException {&#10;        String sql = &quot;INSERT INTO categories (category_name) VALUES (?) RETURNING category_id&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, categoryName);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        Category category = new Category();&#10;                        category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                        category.setCategoryName(categoryName);&#10;                        return category;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/PaymentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/PaymentRepository.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Category;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.Status;&#10;import org.paymentmanagementsystem.model.User;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class PaymentRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public PaymentRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public Payment save(Payment payment) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO payments (amount, type, payment_date, description, category_id, status_id, created_by_user_id)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?)&#10;            RETURNING payment_id&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setBigDecimal(1, payment.getAmount());&#10;            stmt.setString(2, payment.getType());&#10;            stmt.setTimestamp(3, Timestamp.valueOf(payment.getPaymentDate()));&#10;            stmt.setString(4, payment.getDescription());&#10;            stmt.setInt(5, payment.getCategoryId());&#10;            stmt.setInt(6, payment.getStatusId());&#10;            stmt.setInt(7, payment.getCreatedByUserId());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                payment.setPaymentId(rs.getInt(&quot;payment_id&quot;));&#10;            }&#10;            return payment;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Payment&gt; findById(int paymentId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT p.payment_id, p.amount, p.type, p.payment_date, p.description,&#10;                   p.category_id, p.status_id, p.created_by_user_id,&#10;                   c.category_name, s.status_name, u.name as created_by_name&#10;            FROM payments p&#10;            JOIN categories c ON p.category_id = c.category_id&#10;            JOIN status s ON p.status_id = s.status_id&#10;            JOIN users u ON p.created_by_user_id = u.user_id&#10;            WHERE p.payment_id = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, paymentId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Payment payment = mapResultSetToPayment(rs);&#10;                return Optional.of(payment);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;Payment&gt; findAll() throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT p.payment_id, p.amount, p.type, p.payment_date, p.description,&#10;                   p.category_id, p.status_id, p.created_by_user_id,&#10;                   c.category_name, s.status_name, u.name as created_by_name&#10;            FROM payments p&#10;            JOIN categories c ON p.category_id = c.category_id&#10;            JOIN status s ON p.status_id = s.status_id&#10;            JOIN users u ON p.created_by_user_id = u.user_id&#10;            ORDER BY p.payment_date DESC&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Payment&gt; payments = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                payments.add(mapResultSetToPayment(rs));&#10;            }&#10;            return payments;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;Payment&gt; findByUserId(int userId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT p.payment_id, p.amount, p.type, p.payment_date, p.description,&#10;                   p.category_id, p.status_id, p.created_by_user_id,&#10;                   c.category_name, s.status_name, u.name as created_by_name&#10;            FROM payments p&#10;            JOIN categories c ON p.category_id = c.category_id&#10;            JOIN status s ON p.status_id = s.status_id&#10;            JOIN users u ON p.created_by_user_id = u.user_id&#10;            WHERE p.created_by_user_id = ?&#10;            ORDER BY p.payment_date DESC&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Payment&gt; payments = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, userId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            while (rs.next()) {&#10;                payments.add(mapResultSetToPayment(rs));&#10;            }&#10;            return payments;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public void updateStatus(int paymentId, int statusId) throws SQLException {&#10;        String sql = &quot;UPDATE payments SET status_id = ? WHERE payment_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, statusId);&#10;            stmt.setInt(2, paymentId);&#10;            stmt.executeUpdate();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public void deleteById(int paymentId) throws SQLException {&#10;        String sql = &quot;DELETE FROM payments WHERE payment_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, paymentId);&#10;            stmt.executeUpdate();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public boolean existsSalaryPaymentForUserInPeriod(int userId, LocalDate startDate, LocalDate endDate) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT COUNT(*) FROM payments &#10;            WHERE created_by_user_id = ? &#10;            AND type = 'SALARY' &#10;            AND payment_date &gt;= ? &#10;            AND payment_date &lt;= ?&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, userId);&#10;                stmt.setTimestamp(2, Timestamp.valueOf(startDate.atStartOfDay()));&#10;                stmt.setTimestamp(3, Timestamp.valueOf(endDate.atTime(23, 59, 59)));&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        return rs.getInt(1) &gt; 0;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private Payment mapResultSetToPayment(ResultSet rs) throws SQLException {&#10;        Payment payment = new Payment();&#10;        payment.setPaymentId(rs.getInt(&quot;payment_id&quot;));&#10;        payment.setAmount(rs.getBigDecimal(&quot;amount&quot;));&#10;        payment.setType(rs.getString(&quot;type&quot;));&#10;        payment.setPaymentDate(rs.getTimestamp(&quot;payment_date&quot;).toLocalDateTime());&#10;        payment.setDescription(rs.getString(&quot;description&quot;));&#10;        payment.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        payment.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;        payment.setCreatedByUserId(rs.getInt(&quot;created_by_user_id&quot;));&#10;&#10;        // Set related objects&#10;        Category category = new Category();&#10;        category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;        payment.setCategory(category);&#10;&#10;        Status status = new Status();&#10;        status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;        status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;        payment.setStatus(status);&#10;&#10;        User createdBy = new User();&#10;        createdBy.setUserId(rs.getInt(&quot;created_by_user_id&quot;));&#10;        createdBy.setName(rs.getString(&quot;created_by_name&quot;));&#10;        payment.setCreatedBy(createdBy);&#10;&#10;        return payment;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Category;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.Status;&#10;import org.paymentmanagementsystem.model.User;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class PaymentRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public PaymentRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public Payment save(Payment payment) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO payments (amount, type, payment_date, description, category_id, status_id, created_by_user_id)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?)&#10;            RETURNING payment_id&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setBigDecimal(1, payment.getAmount());&#10;            stmt.setString(2, payment.getType());&#10;            stmt.setTimestamp(3, Timestamp.valueOf(payment.getPaymentDate()));&#10;            stmt.setString(4, payment.getDescription());&#10;            stmt.setInt(5, payment.getCategoryId());&#10;            stmt.setInt(6, payment.getStatusId());&#10;            stmt.setInt(7, payment.getCreatedByUserId());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                payment.setPaymentId(rs.getInt(&quot;payment_id&quot;));&#10;            }&#10;            return payment;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Payment&gt; findById(int paymentId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT p.payment_id, p.amount, p.type, p.payment_date, p.description,&#10;                   p.category_id, p.status_id, p.created_by_user_id,&#10;                   c.category_name, s.status_name, u.name as created_by_name&#10;            FROM payments p&#10;            JOIN categories c ON p.category_id = c.category_id&#10;            JOIN status s ON p.status_id = s.status_id&#10;            JOIN users u ON p.created_by_user_id = u.user_id&#10;            WHERE p.payment_id = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, paymentId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Payment payment = mapResultSetToPayment(rs);&#10;                return Optional.of(payment);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;Payment&gt; findAll() throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT p.payment_id, p.amount, p.type, p.payment_date, p.description,&#10;                   p.category_id, p.status_id, p.created_by_user_id,&#10;                   c.category_name, s.status_name, u.name as created_by_name&#10;            FROM payments p&#10;            JOIN categories c ON p.category_id = c.category_id&#10;            JOIN status s ON p.status_id = s.status_id&#10;            JOIN users u ON p.created_by_user_id = u.user_id&#10;            ORDER BY p.payment_date DESC&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Payment&gt; payments = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                payments.add(mapResultSetToPayment(rs));&#10;            }&#10;            return payments;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;Payment&gt; findByUserId(int userId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT p.payment_id, p.amount, p.type, p.payment_date, p.description,&#10;                   p.category_id, p.status_id, p.created_by_user_id,&#10;                   c.category_name, s.status_name, u.name as created_by_name&#10;            FROM payments p&#10;            JOIN categories c ON p.category_id = c.category_id&#10;            JOIN status s ON p.status_id = s.status_id&#10;            JOIN users u ON p.created_by_user_id = u.user_id&#10;            WHERE p.created_by_user_id = ?&#10;            ORDER BY p.payment_date DESC&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Payment&gt; payments = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, userId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            while (rs.next()) {&#10;                payments.add(mapResultSetToPayment(rs));&#10;            }&#10;            return payments;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public void updateStatus(int paymentId, int statusId) throws SQLException {&#10;        String sql = &quot;UPDATE payments SET status_id = ? WHERE payment_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, statusId);&#10;            stmt.setInt(2, paymentId);&#10;            stmt.executeUpdate();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public void deleteById(int paymentId) throws SQLException {&#10;        String sql = &quot;DELETE FROM payments WHERE payment_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, paymentId);&#10;            stmt.executeUpdate();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public boolean existsSalaryPaymentForUserInPeriod(int userId, LocalDate startDate, LocalDate endDate) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT COUNT(*) FROM payments &#10;            WHERE created_by_user_id = ? &#10;            AND type = 'SALARY' &#10;            AND payment_date &gt;= ? &#10;            AND payment_date &lt;= ?&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, userId);&#10;                stmt.setTimestamp(2, Timestamp.valueOf(startDate.atStartOfDay()));&#10;                stmt.setTimestamp(3, Timestamp.valueOf(endDate.atTime(23, 59, 59)));&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        return rs.getInt(1) &gt; 0;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private Payment mapResultSetToPayment(ResultSet rs) throws SQLException {&#10;        Payment payment = new Payment();&#10;        payment.setPaymentId(rs.getInt(&quot;payment_id&quot;));&#10;        payment.setAmount(rs.getBigDecimal(&quot;amount&quot;));&#10;        payment.setType(rs.getString(&quot;type&quot;));&#10;        payment.setPaymentDate(rs.getTimestamp(&quot;payment_date&quot;).toLocalDateTime());&#10;        payment.setDescription(rs.getString(&quot;description&quot;));&#10;        payment.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        payment.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;        payment.setCreatedByUserId(rs.getInt(&quot;created_by_user_id&quot;));&#10;&#10;        // Set related objects&#10;        Category category = new Category();&#10;        category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        category.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;        payment.setCategory(category);&#10;&#10;        Status status = new Status();&#10;        status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;        status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;        payment.setStatus(status);&#10;&#10;        User createdBy = new User();&#10;        createdBy.setUserId(rs.getInt(&quot;created_by_user_id&quot;));&#10;        createdBy.setName(rs.getString(&quot;created_by_name&quot;));&#10;        payment.setCreatedBy(createdBy);&#10;&#10;        return payment;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/StatusRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/StatusRepository.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Status;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class StatusRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public StatusRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public List&lt;Status&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT status_id, status_name FROM status&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Status&gt; statusList = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                Status status = new Status();&#10;                status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;                status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;                statusList.add(status);&#10;            }&#10;            return statusList;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Status&gt; findById(int statusId) throws SQLException {&#10;        String sql = &quot;SELECT status_id, status_name FROM status WHERE status_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, statusId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Status status = new Status();&#10;                status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;                status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;                return Optional.of(status);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Status&gt; findByName(String statusName) throws SQLException {&#10;        String sql = &quot;SELECT status_id, status_name FROM status WHERE status_name = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setString(1, statusName);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Status status = new Status();&#10;                status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;                status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;                return Optional.of(status);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Status;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class StatusRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public StatusRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public List&lt;Status&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT status_id, status_name FROM status&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Status&gt; statusList = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                Status status = new Status();&#10;                status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;                status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;                statusList.add(status);&#10;            }&#10;            return statusList;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Optional&lt;Status&gt; findById(int statusId) throws SQLException {&#10;        String sql = &quot;SELECT status_id, status_name FROM status WHERE status_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, statusId);&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                Status status = new Status();&#10;                status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;                status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;                return Optional.of(status);&#10;            }&#10;            return Optional.empty();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public Status findByName(String statusName) throws SQLException {&#10;        String sql = &quot;SELECT * FROM status WHERE status_name = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, statusName);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        Status status = new Status();&#10;                        status.setStatusId(rs.getInt(&quot;status_id&quot;));&#10;                        status.setStatusName(rs.getString(&quot;status_name&quot;));&#10;                        return status;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/TeamRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/TeamRepository.java" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Team;&#10;&#10;import java.sql.*;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TeamRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public TeamRepository() throws Exception {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public Team createTeam(Team team) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO teams (team_name, created_by_user_id)&#10;            VALUES (?, ?)&#10;            RETURNING team_id, created_date&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, team.getTeamName());&#10;                stmt.setInt(2, team.getCreatedByUserId());&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        team.setTeamId(rs.getInt(&quot;team_id&quot;));&#10;                        team.setCreatedDate(rs.getTimestamp(&quot;created_date&quot;).toLocalDateTime());&#10;                        return team;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public Team findById(int teamId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM teams WHERE team_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, teamId);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        return mapResultSetToTeam(rs);&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public Team findByName(String teamName) throws SQLException {&#10;        String sql = &quot;SELECT * FROM teams WHERE team_name = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, teamName);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        return mapResultSetToTeam(rs);&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;Team&gt; findByCreatedBy(int userId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM teams WHERE created_by_user_id = ? ORDER BY created_date DESC&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Team&gt; teams = new ArrayList&lt;&gt;();&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, userId);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        teams.add(mapResultSetToTeam(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return teams;&#10;    }&#10;&#10;    public List&lt;Team&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT * FROM teams ORDER BY team_name&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;Team&gt; teams = new ArrayList&lt;&gt;();&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        teams.add(mapResultSetToTeam(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return teams;&#10;    }&#10;&#10;    public boolean updateTeam(Team team) throws SQLException {&#10;        String sql = &quot;UPDATE teams SET team_name = ? WHERE team_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, team.getTeamName());&#10;                stmt.setInt(2, team.getTeamId());&#10;&#10;                return stmt.executeUpdate() &gt; 0;&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public boolean deleteTeam(int teamId) throws SQLException {&#10;        String sql = &quot;DELETE FROM teams WHERE team_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, teamId);&#10;                return stmt.executeUpdate() &gt; 0;&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    private Team mapResultSetToTeam(ResultSet rs) throws SQLException {&#10;        Team team = new Team();&#10;        team.setTeamId(rs.getInt(&quot;team_id&quot;));&#10;        team.setTeamName(rs.getString(&quot;team_name&quot;));&#10;        team.setCreatedByUserId(rs.getInt(&quot;created_by_user_id&quot;));&#10;        &#10;        Timestamp timestamp = rs.getTimestamp(&quot;created_date&quot;);&#10;        if (timestamp != null) {&#10;            team.setCreatedDate(timestamp.toLocalDateTime());&#10;        }&#10;        &#10;        return team;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/repository/UserRepository.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Role;&#10;import org.paymentmanagementsystem.model.Team;&#10;import org.paymentmanagementsystem.model.User;&#10;&#10;import java.io.IOException;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class UserRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public UserRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public Optional&lt;User&gt; findByEmail(String email) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.*, r.role_name, t.team_name &#10;            FROM users u &#10;            LEFT JOIN roles r ON u.role_id = r.role_id &#10;            LEFT JOIN teams t ON u.team_id = t.team_id &#10;            WHERE u.email = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, email);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        return Optional.of(mapResultSetToUser(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public User save(User user) throws SQLException {&#10;        String sql = &quot;INSERT INTO users (name, email, password_hash, role_id) VALUES (?, ?, ?, ?) RETURNING user_id&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setString(1, user.getName());&#10;            stmt.setString(2, user.getEmail());&#10;            stmt.setString(3, user.getPasswordHash());&#10;            stmt.setInt(4, user.getRoleId());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                user.setUserId(rs.getInt(&quot;user_id&quot;));&#10;            }&#10;            return user;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public User createUser(User user) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO users (name, email, password_hash, role_id, team_id)&#10;            VALUES (?, ?, ?, ?, ?)&#10;            RETURNING user_id&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, user.getName());&#10;                stmt.setString(2, user.getEmail());&#10;                stmt.setString(3, user.getPasswordHash());&#10;                stmt.setInt(4, user.getRoleId());&#10;&#10;                if (user.getTeamId() != null) {&#10;                    stmt.setInt(5, user.getTeamId());&#10;                } else {&#10;                    stmt.setNull(5, Types.INTEGER);&#10;                }&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        user.setUserId(rs.getInt(&quot;user_id&quot;));&#10;                        return user;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;User&gt; findAll() throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.user_id, u.name, u.email, u.password_hash, u.role_id,&#10;                   r.role_name&#10;            FROM users u&#10;            JOIN roles r ON u.role_id = r.role_id&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                users.add(mapResultSetToUser(rs));&#10;            }&#10;            return users;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findByTeamId(int teamId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.*, r.role_name, t.team_name &#10;            FROM users u &#10;            LEFT JOIN roles r ON u.role_id = r.role_id &#10;            LEFT JOIN teams t ON u.team_id = t.team_id &#10;            WHERE u.team_id = ?&#10;            ORDER BY u.name&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, teamId);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        users.add(mapResultSetToUser(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public void deleteById(int userId) throws SQLException {&#10;        String sql = &quot;DELETE FROM users WHERE user_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, userId);&#10;            stmt.executeUpdate();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public boolean assignUserToTeam(int userId, Integer teamId) throws SQLException {&#10;        String sql = &quot;UPDATE users SET team_id = ? WHERE user_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                if (teamId != null) {&#10;                    stmt.setInt(1, teamId);&#10;                } else {&#10;                    stmt.setNull(1, Types.INTEGER);&#10;                }&#10;                stmt.setInt(2, userId);&#10;&#10;                return stmt.executeUpdate() &gt; 0;&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    private User mapResultSetToUser(ResultSet rs) throws SQLException {&#10;        User user = new User();&#10;        user.setUserId(rs.getInt(&quot;user_id&quot;));&#10;        user.setName(rs.getString(&quot;name&quot;));&#10;        user.setEmail(rs.getString(&quot;email&quot;));&#10;        user.setPasswordHash(rs.getString(&quot;password_hash&quot;));&#10;        user.setRoleId(rs.getInt(&quot;role_id&quot;));&#10;&#10;        // Handle team_id which can be null&#10;        int teamId = rs.getInt(&quot;team_id&quot;);&#10;        if (!rs.wasNull()) {&#10;            user.setTeamId(teamId);&#10;        }&#10;&#10;        // Set role information&#10;        Role role = new Role();&#10;        role.setRoleId(user.getRoleId());&#10;        role.setRoleName(rs.getString(&quot;role_name&quot;));&#10;        user.setRole(role);&#10;&#10;        // Set team information if available&#10;        String teamName = rs.getString(&quot;team_name&quot;);&#10;        if (teamName != null) {&#10;            Team team = new Team();&#10;            team.setTeamId(user.getTeamId());&#10;            team.setTeamName(teamName);&#10;            user.setTeam(team);&#10;        }&#10;&#10;        return user;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.repository;&#10;&#10;import org.paymentmanagementsystem.config.DatabaseConfig;&#10;import org.paymentmanagementsystem.model.Role;&#10;import org.paymentmanagementsystem.model.Team;&#10;import org.paymentmanagementsystem.model.User;&#10;&#10;import java.io.IOException;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class UserRepository {&#10;    private final DatabaseConfig dbConfig;&#10;&#10;    public UserRepository() throws SQLException, IOException {&#10;        this.dbConfig = DatabaseConfig.getInstance();&#10;    }&#10;&#10;    public Optional&lt;User&gt; findByEmail(String email) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.*, r.role_name, t.team_name &#10;            FROM users u &#10;            LEFT JOIN roles r ON u.role_id = r.role_id &#10;            LEFT JOIN teams t ON u.team_id = t.team_id &#10;            WHERE u.email = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, email);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        return Optional.of(mapResultSetToUser(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public User save(User user) throws SQLException {&#10;        String sql = &quot;INSERT INTO users (name, email, password_hash, role_id) VALUES (?, ?, ?, ?) RETURNING user_id&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setString(1, user.getName());&#10;            stmt.setString(2, user.getEmail());&#10;            stmt.setString(3, user.getPasswordHash());&#10;            stmt.setInt(4, user.getRoleId());&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                user.setUserId(rs.getInt(&quot;user_id&quot;));&#10;            }&#10;            return user;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public User createUser(User user) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO users (name, email, password_hash, role_id, team_id, monthly_salary, salary_effective_date)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?)&#10;            RETURNING user_id&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, user.getName());&#10;                stmt.setString(2, user.getEmail());&#10;                stmt.setString(3, user.getPasswordHash());&#10;                stmt.setInt(4, user.getRoleId());&#10;                &#10;                if (user.getTeamId() != null) {&#10;                    stmt.setInt(5, user.getTeamId());&#10;                } else {&#10;                    stmt.setNull(5, Types.INTEGER);&#10;                }&#10;                &#10;                if (user.getMonthlySalary() != null) {&#10;                    stmt.setBigDecimal(6, user.getMonthlySalary());&#10;                } else {&#10;                    stmt.setBigDecimal(6, BigDecimal.ZERO);&#10;                }&#10;                &#10;                if (user.getSalaryEffectiveDate() != null) {&#10;                    stmt.setDate(7, Date.valueOf(user.getSalaryEffectiveDate()));&#10;                } else {&#10;                    stmt.setNull(7, Types.DATE);&#10;                }&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        user.setUserId(rs.getInt(&quot;user_id&quot;));&#10;                        return user;&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;User&gt; findAll() throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.user_id, u.name, u.email, u.password_hash, u.role_id,&#10;                   r.role_name&#10;            FROM users u&#10;            JOIN roles r ON u.role_id = r.role_id&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            Statement stmt = conn.createStatement();&#10;            ResultSet rs = stmt.executeQuery(sql);&#10;&#10;            while (rs.next()) {&#10;                users.add(mapResultSetToUser(rs));&#10;            }&#10;            return users;&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findByTeamId(int teamId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.*, r.role_name, t.team_name &#10;            FROM users u &#10;            LEFT JOIN roles r ON u.role_id = r.role_id &#10;            LEFT JOIN teams t ON u.team_id = t.team_id &#10;            WHERE u.team_id = ?&#10;            ORDER BY u.name&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setInt(1, teamId);&#10;&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        users.add(mapResultSetToUser(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public void deleteById(int userId) throws SQLException {&#10;        String sql = &quot;DELETE FROM users WHERE user_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            PreparedStatement stmt = conn.prepareStatement(sql);&#10;            stmt.setInt(1, userId);&#10;            stmt.executeUpdate();&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public boolean assignUserToTeam(int userId, Integer teamId) throws SQLException {&#10;        String sql = &quot;UPDATE users SET team_id = ? WHERE user_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                if (teamId != null) {&#10;                    stmt.setInt(1, teamId);&#10;                } else {&#10;                    stmt.setNull(1, Types.INTEGER);&#10;                }&#10;                stmt.setInt(2, userId);&#10;&#10;                return stmt.executeUpdate() &gt; 0;&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public boolean updateUserSalary(int userId, BigDecimal monthlySalary, LocalDate effectiveDate) throws SQLException {&#10;        String sql = &quot;UPDATE users SET monthly_salary = ?, salary_effective_date = ? WHERE user_id = ?&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setBigDecimal(1, monthlySalary);&#10;                stmt.setDate(2, Date.valueOf(effectiveDate));&#10;                stmt.setInt(3, userId);&#10;&#10;                return stmt.executeUpdate() &gt; 0;&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findUsersWithSalary() throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT u.*, r.role_name, t.team_name &#10;            FROM users u &#10;            LEFT JOIN roles r ON u.role_id = r.role_id &#10;            LEFT JOIN teams t ON u.team_id = t.team_id &#10;            WHERE u.monthly_salary &gt; 0 AND u.salary_effective_date IS NOT NULL&#10;            ORDER BY u.name&#10;            &quot;&quot;&quot;;&#10;&#10;        Connection conn = null;&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try {&#10;            conn = dbConfig.getConnection();&#10;            try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                try (ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        users.add(mapResultSetToUser(rs));&#10;                    }&#10;                }&#10;            }&#10;        } finally {&#10;            dbConfig.returnConnection(conn);&#10;        }&#10;        return users;&#10;    }&#10;&#10;    private User mapResultSetToUser(ResultSet rs) throws SQLException {&#10;        User user = new User();&#10;        user.setUserId(rs.getInt(&quot;user_id&quot;));&#10;        user.setName(rs.getString(&quot;name&quot;));&#10;        user.setEmail(rs.getString(&quot;email&quot;));&#10;        user.setPasswordHash(rs.getString(&quot;password_hash&quot;));&#10;        user.setRoleId(rs.getInt(&quot;role_id&quot;));&#10;        &#10;        // Handle team_id which can be null&#10;        int teamId = rs.getInt(&quot;team_id&quot;);&#10;        if (!rs.wasNull()) {&#10;            user.setTeamId(teamId);&#10;        }&#10;&#10;        // Handle salary fields&#10;        BigDecimal monthlySalary = rs.getBigDecimal(&quot;monthly_salary&quot;);&#10;        if (monthlySalary != null) {&#10;            user.setMonthlySalary(monthlySalary);&#10;        }&#10;        &#10;        Date salaryEffectiveDate = rs.getDate(&quot;salary_effective_date&quot;);&#10;        if (salaryEffectiveDate != null) {&#10;            user.setSalaryEffectiveDate(salaryEffectiveDate.toLocalDate());&#10;        }&#10;&#10;        // Set role information&#10;        Role role = new Role();&#10;        role.setRoleId(user.getRoleId());&#10;        role.setRoleName(rs.getString(&quot;role_name&quot;));&#10;        user.setRole(role);&#10;&#10;        // Set team information if available&#10;        String teamName = rs.getString(&quot;team_name&quot;);&#10;        if (teamName != null) {&#10;            Team team = new Team();&#10;            team.setTeamId(user.getTeamId());&#10;            team.setTeamName(teamName);&#10;            user.setTeam(team);&#10;        }&#10;&#10;        return user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/service/PaymentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/service/PaymentService.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.service;&#10;&#10;import org.paymentmanagementsystem.dto.PaymentDTO;&#10;import org.paymentmanagementsystem.exception.AuthorizationException;&#10;import org.paymentmanagementsystem.exception.PaymentException;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.StatusRepository;&#10;import org.paymentmanagementsystem.util.ValidationUtil;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.concurrent.CompletableFuture;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;import java.util.stream.Collectors;&#10;&#10;public class PaymentService {&#10;    private final PaymentRepository paymentRepository;&#10;    private final StatusRepository statusRepository;&#10;    private final AuditService auditService;&#10;    private final ExecutorService executorService;&#10;&#10;    public PaymentService() throws SQLException, IOException {&#10;        this.paymentRepository = new PaymentRepository();&#10;        this.statusRepository = new StatusRepository();&#10;        this.auditService = new AuditService();&#10;        this.executorService = Executors.newFixedThreadPool(5);&#10;    }&#10;&#10;    public CompletableFuture&lt;Payment&gt; createPayment(PaymentDTO paymentDTO, User currentUser) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                // Validate input&#10;                if (!ValidationUtil.isValidAmount(paymentDTO.getAmount())) {&#10;                    throw new PaymentException(&quot;Invalid amount&quot;);&#10;                }&#10;&#10;                if (!ValidationUtil.isNotEmpty(paymentDTO.getType())) {&#10;                    throw new PaymentException(&quot;Payment type cannot be empty&quot;);&#10;                }&#10;&#10;                // Get pending status ID&#10;                org.paymentmanagementsystem.model.Status pendingStatus = statusRepository.findByName(&quot;PENDING&quot;);&#10;                if (pendingStatus == null) {&#10;                    throw new PaymentException(&quot;Default status not found&quot;);&#10;                }&#10;&#10;                // Create payment&#10;                Payment payment = new Payment(&#10;                        paymentDTO.getAmount(),&#10;                        paymentDTO.getType(),&#10;                        paymentDTO.getDescription(),&#10;                        paymentDTO.getCategoryId(),&#10;                        pendingStatus.getStatusId(),&#10;                        currentUser.getUserId()&#10;                );&#10;&#10;                Payment savedPayment = paymentRepository.save(payment);&#10;&#10;                // Log audit trail asynchronously&#10;                auditService.logPaymentCreation(savedPayment, currentUser);&#10;&#10;                return savedPayment;&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error creating payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    public List&lt;Payment&gt; getPaymentsByUser(User currentUser) throws PaymentException {&#10;        try {&#10;            String role = currentUser.getRole().getRoleName().toLowerCase();&#10;&#10;            switch (role) {&#10;                case &quot;admin&quot;:&#10;                case &quot;finance_manager&quot;:&#10;                    return paymentRepository.findAll();&#10;                case &quot;viewer&quot;:&#10;                    return paymentRepository.findByUserId(currentUser.getUserId());&#10;                default:&#10;                    throw new AuthorizationException(&quot;Invalid role&quot;);&#10;            }&#10;        } catch (SQLException | AuthorizationException e) {&#10;            throw new PaymentException(&quot;Error retrieving payments&quot;, e);&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Void&gt; approvePayment(int paymentId, User currentUser) {&#10;        return CompletableFuture.runAsync(() -&gt; {&#10;            try {&#10;                if (!hasApprovalPermission(currentUser)) {&#10;                    throw new AuthorizationException(&quot;User does not have approval permission&quot;);&#10;                }&#10;&#10;                Optional&lt;Payment&gt; paymentOpt = paymentRepository.findById(paymentId);&#10;                if (paymentOpt.isEmpty()) {&#10;                    throw new PaymentException(&quot;Payment not found&quot;);&#10;                }&#10;&#10;                Payment payment = paymentOpt.get();&#10;&#10;                // Get approved status&#10;                org.paymentmanagementsystem.model.Status approvedStatus = statusRepository.findByName(&quot;APPROVED&quot;);&#10;                if (approvedStatus == null) {&#10;                    throw new PaymentException(&quot;Approved status not found&quot;);&#10;                }&#10;&#10;                // Update status&#10;                paymentRepository.updateStatus(paymentId, approvedStatus.getStatusId());&#10;&#10;                // Log audit trail&#10;                auditService.logStatusChange(payment, currentUser, &quot;APPROVED&quot;);&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error approving payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    public CompletableFuture&lt;Void&gt; rejectPayment(int paymentId, User currentUser) {&#10;        return CompletableFuture.runAsync(() -&gt; {&#10;            try {&#10;                if (!hasApprovalPermission(currentUser)) {&#10;                    throw new AuthorizationException(&quot;User does not have approval permission&quot;);&#10;                }&#10;&#10;                Optional&lt;Payment&gt; paymentOpt = paymentRepository.findById(paymentId);&#10;                if (paymentOpt.isEmpty()) {&#10;                    throw new PaymentException(&quot;Payment not found&quot;);&#10;                }&#10;&#10;                Payment payment = paymentOpt.get();&#10;&#10;                // Get rejected status&#10;                Optional&lt;org.paymentmanagementsystem.model.Status&gt; rejectedStatus =&#10;                        statusRepository.findByName(&quot;REJECTED&quot;);&#10;                if (rejectedStatus.isEmpty()) {&#10;                    throw new PaymentException(&quot;Rejected status not found&quot;);&#10;                }&#10;&#10;                // Update status&#10;                paymentRepository.updateStatus(paymentId, rejectedStatus.get().getStatusId());&#10;&#10;                // Log audit trail&#10;                auditService.logStatusChange(payment, currentUser, &quot;REJECTED&quot;);&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error rejecting payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    public List&lt;Payment&gt; getPaymentsByStatus(String statusName, User currentUser) throws PaymentException {&#10;        try {&#10;            List&lt;Payment&gt; allPayments = getPaymentsByUser(currentUser);&#10;&#10;            return allPayments.stream()&#10;                    .filter(payment -&gt; payment.getStatus().getStatusName().equalsIgnoreCase(statusName))&#10;                    .collect(Collectors.toList());&#10;&#10;        } catch (Exception e) {&#10;            throw new PaymentException(&quot;Error filtering payments by status&quot;, e);&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Void&gt; deletePayment(int paymentId, User currentUser) {&#10;        return CompletableFuture.runAsync(() -&gt; {&#10;            try {&#10;                if (!hasDeletePermission(currentUser)) {&#10;                    throw new AuthorizationException(&quot;User does not have delete permission&quot;);&#10;                }&#10;&#10;                Optional&lt;Payment&gt; paymentOpt = paymentRepository.findById(paymentId);&#10;                if (paymentOpt.isEmpty()) {&#10;                    throw new PaymentException(&quot;Payment not found&quot;);&#10;                }&#10;&#10;                Payment payment = paymentOpt.get();&#10;&#10;                // Log audit trail before deletion&#10;                auditService.logPaymentDeletion(payment, currentUser);&#10;&#10;                // Delete payment&#10;                paymentRepository.deleteById(paymentId);&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error deleting payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    private boolean hasApprovalPermission(User user) {&#10;        String role = user.getRole().getRoleName().toLowerCase();&#10;        return role.equals(&quot;admin&quot;) || role.equals(&quot;finance_manager&quot;);&#10;    }&#10;&#10;    private boolean hasDeletePermission(User user) {&#10;        String role = user.getRole().getRoleName().toLowerCase();&#10;        return role.equals(&quot;admin&quot;);&#10;    }&#10;&#10;    public void shutdown() {&#10;        executorService.shutdown();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.service;&#10;&#10;import org.paymentmanagementsystem.dto.PaymentDTO;&#10;import org.paymentmanagementsystem.exception.AuthorizationException;&#10;import org.paymentmanagementsystem.exception.PaymentException;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.StatusRepository;&#10;import org.paymentmanagementsystem.util.ValidationUtil;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.concurrent.CompletableFuture;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;import java.util.stream.Collectors;&#10;&#10;public class PaymentService {&#10;    private final PaymentRepository paymentRepository;&#10;    private final StatusRepository statusRepository;&#10;    private final AuditService auditService;&#10;    private final ExecutorService executorService;&#10;&#10;    public PaymentService() throws SQLException, IOException {&#10;        this.paymentRepository = new PaymentRepository();&#10;        this.statusRepository = new StatusRepository();&#10;        this.auditService = new AuditService();&#10;        this.executorService = Executors.newFixedThreadPool(5);&#10;    }&#10;&#10;    public CompletableFuture&lt;Payment&gt; createPayment(PaymentDTO paymentDTO, User currentUser) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                // Validate input&#10;                if (!ValidationUtil.isValidAmount(paymentDTO.getAmount())) {&#10;                    throw new PaymentException(&quot;Invalid amount&quot;);&#10;                }&#10;&#10;                if (!ValidationUtil.isNotEmpty(paymentDTO.getType())) {&#10;                    throw new PaymentException(&quot;Payment type cannot be empty&quot;);&#10;                }&#10;&#10;                // Get pending status ID&#10;                org.paymentmanagementsystem.model.Status pendingStatus = statusRepository.findByName(&quot;PENDING&quot;);&#10;                if (pendingStatus == null) {&#10;                    throw new PaymentException(&quot;Default status not found&quot;);&#10;                }&#10;&#10;                // Create payment&#10;                Payment payment = new Payment(&#10;                        paymentDTO.getAmount(),&#10;                        paymentDTO.getType(),&#10;                        paymentDTO.getDescription(),&#10;                        paymentDTO.getCategoryId(),&#10;                        pendingStatus.getStatusId(),&#10;                        currentUser.getUserId()&#10;                );&#10;&#10;                Payment savedPayment = paymentRepository.save(payment);&#10;&#10;                // Log audit trail asynchronously&#10;                auditService.logPaymentCreation(savedPayment, currentUser);&#10;&#10;                return savedPayment;&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error creating payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    public List&lt;Payment&gt; getPaymentsByUser(User currentUser) throws PaymentException {&#10;        try {&#10;            String role = currentUser.getRole().getRoleName().toLowerCase();&#10;&#10;            switch (role) {&#10;                case &quot;admin&quot;:&#10;                case &quot;finance_manager&quot;:&#10;                    return paymentRepository.findAll();&#10;                case &quot;viewer&quot;:&#10;                    return paymentRepository.findByUserId(currentUser.getUserId());&#10;                default:&#10;                    throw new AuthorizationException(&quot;Invalid role&quot;);&#10;            }&#10;        } catch (SQLException | AuthorizationException e) {&#10;            throw new PaymentException(&quot;Error retrieving payments&quot;, e);&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Void&gt; approvePayment(int paymentId, User currentUser) {&#10;        return CompletableFuture.runAsync(() -&gt; {&#10;            try {&#10;                if (!hasApprovalPermission(currentUser)) {&#10;                    throw new AuthorizationException(&quot;User does not have approval permission&quot;);&#10;                }&#10;&#10;                Optional&lt;Payment&gt; paymentOpt = paymentRepository.findById(paymentId);&#10;                if (paymentOpt.isEmpty()) {&#10;                    throw new PaymentException(&quot;Payment not found&quot;);&#10;                }&#10;&#10;                Payment payment = paymentOpt.get();&#10;&#10;                // Get approved status&#10;                org.paymentmanagementsystem.model.Status approvedStatus = statusRepository.findByName(&quot;APPROVED&quot;);&#10;                if (approvedStatus == null) {&#10;                    throw new PaymentException(&quot;Approved status not found&quot;);&#10;                }&#10;&#10;                // Update status&#10;                paymentRepository.updateStatus(paymentId, approvedStatus.getStatusId());&#10;&#10;                // Log audit trail&#10;                auditService.logStatusChange(payment, currentUser, &quot;APPROVED&quot;);&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error approving payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    public CompletableFuture&lt;Void&gt; rejectPayment(int paymentId, User currentUser) {&#10;        return CompletableFuture.runAsync(() -&gt; {&#10;            try {&#10;                if (!hasApprovalPermission(currentUser)) {&#10;                    throw new AuthorizationException(&quot;User does not have approval permission&quot;);&#10;                }&#10;&#10;                Optional&lt;Payment&gt; paymentOpt = paymentRepository.findById(paymentId);&#10;                if (paymentOpt.isEmpty()) {&#10;                    throw new PaymentException(&quot;Payment not found&quot;);&#10;                }&#10;&#10;                Payment payment = paymentOpt.get();&#10;&#10;                // Get rejected status&#10;                org.paymentmanagementsystem.model.Status rejectedStatus = statusRepository.findByName(&quot;REJECTED&quot;);&#10;                if (rejectedStatus == null) {&#10;                    throw new PaymentException(&quot;Rejected status not found&quot;);&#10;                }&#10;&#10;                // Update status&#10;                paymentRepository.updateStatus(paymentId, rejectedStatus.getStatusId());&#10;&#10;                // Log audit trail&#10;                auditService.logStatusChange(payment, currentUser, &quot;REJECTED&quot;);&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error rejecting payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    public List&lt;Payment&gt; getPaymentsByStatus(String statusName, User currentUser) throws PaymentException {&#10;        try {&#10;            List&lt;Payment&gt; allPayments = getPaymentsByUser(currentUser);&#10;&#10;            return allPayments.stream()&#10;                    .filter(payment -&gt; payment.getStatus().getStatusName().equalsIgnoreCase(statusName))&#10;                    .collect(Collectors.toList());&#10;&#10;        } catch (Exception e) {&#10;            throw new PaymentException(&quot;Error filtering payments by status&quot;, e);&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Void&gt; deletePayment(int paymentId, User currentUser) {&#10;        return CompletableFuture.runAsync(() -&gt; {&#10;            try {&#10;                if (!hasDeletePermission(currentUser)) {&#10;                    throw new AuthorizationException(&quot;User does not have delete permission&quot;);&#10;                }&#10;&#10;                Optional&lt;Payment&gt; paymentOpt = paymentRepository.findById(paymentId);&#10;                if (paymentOpt.isEmpty()) {&#10;                    throw new PaymentException(&quot;Payment not found&quot;);&#10;                }&#10;&#10;                Payment payment = paymentOpt.get();&#10;&#10;                // Log audit trail before deletion&#10;                auditService.logPaymentDeletion(payment, currentUser);&#10;&#10;                // Delete payment&#10;                paymentRepository.deleteById(paymentId);&#10;&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;Error deleting payment&quot;, e);&#10;            }&#10;        }, executorService);&#10;    }&#10;&#10;    private boolean hasApprovalPermission(User user) {&#10;        String role = user.getRole().getRoleName().toLowerCase();&#10;        return role.equals(&quot;admin&quot;) || role.equals(&quot;finance_manager&quot;);&#10;    }&#10;&#10;    private boolean hasDeletePermission(User user) {&#10;        String role = user.getRole().getRoleName().toLowerCase();&#10;        return role.equals(&quot;admin&quot;);&#10;    }&#10;&#10;    public void shutdown() {&#10;        executorService.shutdown();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/service/ReportService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/service/ReportService.java" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.service;&#10;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.UserRepository;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.time.YearMonth;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;&#10;public class ReportService {&#10;    private final PaymentRepository paymentRepository;&#10;    private final UserRepository userRepository;&#10;&#10;    public ReportService() throws Exception {&#10;        this.paymentRepository = new PaymentRepository();&#10;        this.userRepository = new UserRepository();&#10;    }&#10;&#10;    /**&#10;     * Generate monthly report for a specific month and year&#10;     */&#10;    public MonthlyReport generateMonthlyReport(int year, int month) throws SQLException {&#10;        YearMonth yearMonth = YearMonth.of(year, month);&#10;        LocalDate startDate = yearMonth.atDay(1);&#10;        LocalDate endDate = yearMonth.atEndOfMonth();&#10;&#10;        List&lt;Payment&gt; payments = getPaymentsByDateRange(startDate, endDate);&#10;        return createMonthlyReport(payments, yearMonth);&#10;    }&#10;&#10;    /**&#10;     * Generate quarterly report for a specific quarter and year&#10;     */&#10;    public QuarterlyReport generateQuarterlyReport(int year, int quarter) throws SQLException {&#10;        if (quarter &lt; 1 || quarter &gt; 4) {&#10;            throw new IllegalArgumentException(&quot;Quarter must be between 1 and 4&quot;);&#10;        }&#10;&#10;        // Calculate quarter date range&#10;        int startMonth = (quarter - 1) * 3 + 1;&#10;        YearMonth startYearMonth = YearMonth.of(year, startMonth);&#10;        YearMonth endYearMonth = startYearMonth.plusMonths(2);&#10;        &#10;        LocalDate startDate = startYearMonth.atDay(1);&#10;        LocalDate endDate = endYearMonth.atEndOfMonth();&#10;&#10;        List&lt;Payment&gt; payments = getPaymentsByDateRange(startDate, endDate);&#10;        return createQuarterlyReport(payments, year, quarter, startDate, endDate);&#10;    }&#10;&#10;    /**&#10;     * Generate current month report&#10;     */&#10;    public MonthlyReport generateCurrentMonthReport() throws SQLException {&#10;        YearMonth currentMonth = YearMonth.now();&#10;        return generateMonthlyReport(currentMonth.getYear(), currentMonth.getMonthValue());&#10;    }&#10;&#10;    /**&#10;     * Generate current quarter report&#10;     */&#10;    public QuarterlyReport generateCurrentQuarterReport() throws SQLException {&#10;        LocalDate today = LocalDate.now();&#10;        int quarter = (today.getMonthValue() - 1) / 3 + 1;&#10;        return generateQuarterlyReport(today.getYear(), quarter);&#10;    }&#10;&#10;    private List&lt;Payment&gt; getPaymentsByDateRange(LocalDate startDate, LocalDate endDate) throws SQLException {&#10;        List&lt;Payment&gt; allPayments = paymentRepository.findAll();&#10;        return allPayments.stream()&#10;                .filter(payment -&gt; {&#10;                    LocalDate paymentDate = payment.getPaymentDate().toLocalDate();&#10;                    return !paymentDate.isBefore(startDate) &amp;&amp; !paymentDate.isAfter(endDate);&#10;                })&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    private MonthlyReport createMonthlyReport(List&lt;Payment&gt; payments, YearMonth yearMonth) {&#10;        MonthlyReport report = new MonthlyReport();&#10;        report.setYear(yearMonth.getYear());&#10;        report.setMonth(yearMonth.getMonthValue());&#10;        report.setMonthName(yearMonth.getMonth().name());&#10;        &#10;        // Calculate totals&#10;        report.setTotalPayments(payments.size());&#10;        report.setTotalAmount(calculateTotalAmount(payments));&#10;        &#10;        // Calculate by status&#10;        Map&lt;String, Integer&gt; paymentsByStatus = new HashMap&lt;&gt;();&#10;        Map&lt;String, BigDecimal&gt; amountsByStatus = new HashMap&lt;&gt;();&#10;        &#10;        for (Payment payment : payments) {&#10;            String status = payment.getStatus().getStatusName();&#10;            paymentsByStatus.merge(status, 1, Integer::sum);&#10;            amountsByStatus.merge(status, payment.getAmount(), BigDecimal::add);&#10;        }&#10;        &#10;        report.setPaymentsByStatus(paymentsByStatus);&#10;        report.setAmountsByStatus(amountsByStatus);&#10;        &#10;        // Calculate by type&#10;        Map&lt;String, Integer&gt; paymentsByType = new HashMap&lt;&gt;();&#10;        Map&lt;String, BigDecimal&gt; amountsByType = new HashMap&lt;&gt;();&#10;        &#10;        for (Payment payment : payments) {&#10;            String type = payment.getType();&#10;            paymentsByType.merge(type, 1, Integer::sum);&#10;            amountsByType.merge(type, payment.getAmount(), BigDecimal::add);&#10;        }&#10;        &#10;        report.setPaymentsByType(paymentsByType);&#10;        report.setAmountsByType(amountsByType);&#10;        &#10;        // Calculate by category&#10;        Map&lt;String, Integer&gt; paymentsByCategory = new HashMap&lt;&gt;();&#10;        Map&lt;String, BigDecimal&gt; amountsByCategory = new HashMap&lt;&gt;();&#10;        &#10;        for (Payment payment : payments) {&#10;            String category = payment.getCategory().getCategoryName();&#10;            paymentsByCategory.merge(category, 1, Integer::sum);&#10;            amountsByCategory.merge(category, payment.getAmount(), BigDecimal::add);&#10;        }&#10;        &#10;        report.setPaymentsByCategory(paymentsByCategory);&#10;        report.setAmountsByCategory(amountsByCategory);&#10;        &#10;        return report;&#10;    }&#10;&#10;    private QuarterlyReport createQuarterlyReport(List&lt;Payment&gt; payments, int year, int quarter, &#10;                                                LocalDate startDate, LocalDate endDate) {&#10;        QuarterlyReport report = new QuarterlyReport();&#10;        report.setYear(year);&#10;        report.setQuarter(quarter);&#10;        report.setStartDate(startDate);&#10;        report.setEndDate(endDate);&#10;        &#10;        // Calculate totals&#10;        report.setTotalPayments(payments.size());&#10;        report.setTotalAmount(calculateTotalAmount(payments));&#10;        &#10;        // Group payments by month within the quarter&#10;        Map&lt;YearMonth, List&lt;Payment&gt;&gt; paymentsByMonth = payments.stream()&#10;                .collect(Collectors.groupingBy(p -&gt; YearMonth.from(p.getPaymentDate())));&#10;        &#10;        Map&lt;String, MonthlyReport&gt; monthlyReports = new HashMap&lt;&gt;();&#10;        for (Map.Entry&lt;YearMonth, List&lt;Payment&gt;&gt; entry : paymentsByMonth.entrySet()) {&#10;            YearMonth month = entry.getKey();&#10;            String monthKey = month.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM&quot;));&#10;            monthlyReports.put(monthKey, createMonthlyReport(entry.getValue(), month));&#10;        }&#10;        &#10;        report.setMonthlyBreakdown(monthlyReports);&#10;        &#10;        // Calculate by status for entire quarter&#10;        Map&lt;String, Integer&gt; paymentsByStatus = new HashMap&lt;&gt;();&#10;        Map&lt;String, BigDecimal&gt; amountsByStatus = new HashMap&lt;&gt;();&#10;        &#10;        for (Payment payment : payments) {&#10;            String status = payment.getStatus().getStatusName();&#10;            paymentsByStatus.merge(status, 1, Integer::sum);&#10;            amountsByStatus.merge(status, payment.getAmount(), BigDecimal::add);&#10;        }&#10;        &#10;        report.setPaymentsByStatus(paymentsByStatus);&#10;        report.setAmountsByStatus(amountsByStatus);&#10;        &#10;        // Calculate by type for entire quarter&#10;        Map&lt;String, Integer&gt; paymentsByType = new HashMap&lt;&gt;();&#10;        Map&lt;String, BigDecimal&gt; amountsByType = new HashMap&lt;&gt;();&#10;        &#10;        for (Payment payment : payments) {&#10;            String type = payment.getType();&#10;            paymentsByType.merge(type, 1, Integer::sum);&#10;            amountsByType.merge(type, payment.getAmount(), BigDecimal::add);&#10;        }&#10;        &#10;        report.setPaymentsByType(paymentsByType);&#10;        report.setAmountsByType(amountsByType);&#10;        &#10;        return report;&#10;    }&#10;&#10;    private BigDecimal calculateTotalAmount(List&lt;Payment&gt; payments) {&#10;        return payments.stream()&#10;                .map(Payment::getAmount)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Inner classes for report data structures&#10;    public static class MonthlyReport {&#10;        private int year;&#10;        private int month;&#10;        private String monthName;&#10;        private int totalPayments;&#10;        private BigDecimal totalAmount;&#10;        private Map&lt;String, Integer&gt; paymentsByStatus;&#10;        private Map&lt;String, BigDecimal&gt; amountsByStatus;&#10;        private Map&lt;String, Integer&gt; paymentsByType;&#10;        private Map&lt;String, BigDecimal&gt; amountsByType;&#10;        private Map&lt;String, Integer&gt; paymentsByCategory;&#10;        private Map&lt;String, BigDecimal&gt; amountsByCategory;&#10;&#10;        // Getters and setters&#10;        public int getYear() { return year; }&#10;        public void setYear(int year) { this.year = year; }&#10;        &#10;        public int getMonth() { return month; }&#10;        public void setMonth(int month) { this.month = month; }&#10;        &#10;        public String getMonthName() { return monthName; }&#10;        public void setMonthName(String monthName) { this.monthName = monthName; }&#10;        &#10;        public int getTotalPayments() { return totalPayments; }&#10;        public void setTotalPayments(int totalPayments) { this.totalPayments = totalPayments; }&#10;        &#10;        public BigDecimal getTotalAmount() { return totalAmount; }&#10;        public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }&#10;        &#10;        public Map&lt;String, Integer&gt; getPaymentsByStatus() { return paymentsByStatus; }&#10;        public void setPaymentsByStatus(Map&lt;String, Integer&gt; paymentsByStatus) { this.paymentsByStatus = paymentsByStatus; }&#10;        &#10;        public Map&lt;String, BigDecimal&gt; getAmountsByStatus() { return amountsByStatus; }&#10;        public void setAmountsByStatus(Map&lt;String, BigDecimal&gt; amountsByStatus) { this.amountsByStatus = amountsByStatus; }&#10;        &#10;        public Map&lt;String, Integer&gt; getPaymentsByType() { return paymentsByType; }&#10;        public void setPaymentsByType(Map&lt;String, Integer&gt; paymentsByType) { this.paymentsByType = paymentsByType; }&#10;        &#10;        public Map&lt;String, BigDecimal&gt; getAmountsByType() { return amountsByType; }&#10;        public void setAmountsByType(Map&lt;String, BigDecimal&gt; amountsByType) { this.amountsByType = amountsByType; }&#10;        &#10;        public Map&lt;String, Integer&gt; getPaymentsByCategory() { return paymentsByCategory; }&#10;        public void setPaymentsByCategory(Map&lt;String, Integer&gt; paymentsByCategory) { this.paymentsByCategory = paymentsByCategory; }&#10;        &#10;        public Map&lt;String, BigDecimal&gt; getAmountsByCategory() { return amountsByCategory; }&#10;        public void setAmountsByCategory(Map&lt;String, BigDecimal&gt; amountsByCategory) { this.amountsByCategory = amountsByCategory; }&#10;    }&#10;&#10;    public static class QuarterlyReport {&#10;        private int year;&#10;        private int quarter;&#10;        private LocalDate startDate;&#10;        private LocalDate endDate;&#10;        private int totalPayments;&#10;        private BigDecimal totalAmount;&#10;        private Map&lt;String, Integer&gt; paymentsByStatus;&#10;        private Map&lt;String, BigDecimal&gt; amountsByStatus;&#10;        private Map&lt;String, Integer&gt; paymentsByType;&#10;        private Map&lt;String, BigDecimal&gt; amountsByType;&#10;        private Map&lt;String, MonthlyReport&gt; monthlyBreakdown;&#10;&#10;        // Getters and setters&#10;        public int getYear() { return year; }&#10;        public void setYear(int year) { this.year = year; }&#10;        &#10;        public int getQuarter() { return quarter; }&#10;        public void setQuarter(int quarter) { this.quarter = quarter; }&#10;        &#10;        public LocalDate getStartDate() { return startDate; }&#10;        public void setStartDate(LocalDate startDate) { this.startDate = startDate; }&#10;        &#10;        public LocalDate getEndDate() { return endDate; }&#10;        public void setEndDate(LocalDate endDate) { this.endDate = endDate; }&#10;        &#10;        public int getTotalPayments() { return totalPayments; }&#10;        public void setTotalPayments(int totalPayments) { this.totalPayments = totalPayments; }&#10;        &#10;        public BigDecimal getTotalAmount() { return totalAmount; }&#10;        public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }&#10;        &#10;        public Map&lt;String, Integer&gt; getPaymentsByStatus() { return paymentsByStatus; }&#10;        public void setPaymentsByStatus(Map&lt;String, Integer&gt; paymentsByStatus) { this.paymentsByStatus = paymentsByStatus; }&#10;        &#10;        public Map&lt;String, BigDecimal&gt; getAmountsByStatus() { return amountsByStatus; }&#10;        public void setAmountsByStatus(Map&lt;String, BigDecimal&gt; amountsByStatus) { this.amountsByStatus = amountsByStatus; }&#10;        &#10;        public Map&lt;String, Integer&gt; getPaymentsByType() { return paymentsByType; }&#10;        public void setPaymentsByType(Map&lt;String, Integer&gt; paymentsByType) { this.paymentsByType = paymentsByType; }&#10;        &#10;        public Map&lt;String, BigDecimal&gt; getAmountsByType() { return amountsByType; }&#10;        public void setAmountsByType(Map&lt;String, BigDecimal&gt; amountsByType) { this.amountsByType = amountsByType; }&#10;        &#10;        public Map&lt;String, MonthlyReport&gt; getMonthlyBreakdown() { return monthlyBreakdown; }&#10;        public void setMonthlyBreakdown(Map&lt;String, MonthlyReport&gt; monthlyBreakdown) { this.monthlyBreakdown = monthlyBreakdown; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/service/SalaryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/service/SalaryService.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.service;&#10;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.CategoryRepository;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.StatusRepository;&#10;import org.paymentmanagementsystem.repository.UserRepository;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.YearMonth;&#10;import java.util.List;&#10;&#10;public class SalaryService {&#10;    private final UserRepository userRepository;&#10;    private final PaymentRepository paymentRepository;&#10;    private final CategoryRepository categoryRepository;&#10;    private final StatusRepository statusRepository;&#10;    private final AuditService auditService;&#10;&#10;    public SalaryService() throws Exception {&#10;        this.userRepository = new UserRepository();&#10;        this.paymentRepository = new PaymentRepository();&#10;        this.categoryRepository = new CategoryRepository();&#10;        this.statusRepository = new StatusRepository();&#10;        this.auditService = new AuditService();&#10;    }&#10;    &#10;    public void generateMonthlySalaryPayments() throws SQLException {&#10;        YearMonth currentMonth = YearMonth.now();&#10;        generateSalaryPaymentsForMonth(currentMonth);&#10;    }&#10;    &#10;    public void generateSalaryPaymentsForMonth(YearMonth yearMonth) throws SQLException {&#10;        List&lt;User&gt; usersWithSalary = userRepository.findUsersWithSalary();&#10;&#10;        System.out.println(&quot;\n=== GENERATING MONTHLY SALARY PAYMENTS ===&quot;);&#10;        System.out.println(&quot;Month: &quot; + yearMonth);&#10;        System.out.println(&quot;Eligible users: &quot; + usersWithSalary.size());&#10;&#10;        int successCount = 0;&#10;        int skipCount = 0;&#10;        &#10;        Integer salaryCategoryId = getSalaryCategoryId();&#10;        Integer approvedStatusId = getApprovedStatusId();&#10;&#10;        for (User user : usersWithSalary) {&#10;            try {&#10;                // Check if user has salary and effective date&#10;                if (user.getMonthlySalary() == null || user.getMonthlySalary().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - No salary set&quot;);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                if (user.getSalaryEffectiveDate() == null) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - No effective date set&quot;);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                // Check if salary is effective for this month&#10;                YearMonth effectiveMonth = YearMonth.from(user.getSalaryEffectiveDate());&#10;                if (yearMonth.isBefore(effectiveMonth)) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - Salary not effective yet&quot;);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                // Check if salary payment already exists for this month&#10;                if (salaryPaymentExistsForMonth(user.getUserId(), yearMonth)) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - Salary already paid for &quot; + yearMonth);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                // Create salary payment&#10;                Payment salaryPayment = new Payment();&#10;                salaryPayment.setAmount(user.getMonthlySalary());&#10;                salaryPayment.setType(&quot;SALARY&quot;);&#10;                salaryPayment.setDescription(&quot;Monthly salary for &quot; + yearMonth + &quot; - &quot; + user.getName());&#10;                salaryPayment.setCategoryId(salaryCategoryId);&#10;                salaryPayment.setStatusId(approvedStatusId); // Auto-approve salary payments&#10;                salaryPayment.setCreatedByUserId(user.getUserId()); // Salary is &quot;created by&quot; the user receiving it&#10;                salaryPayment.setTeamId(user.getTeamId());&#10;                salaryPayment.setPaymentDate(LocalDateTime.now());&#10;&#10;                // Save the payment&#10;                Payment createdPayment = paymentRepository.save(salaryPayment);&#10;&#10;                if (createdPayment != null) {&#10;                    // Create audit trail&#10;                    auditService.logPaymentAction(createdPayment.getPaymentId(), user.getUserId(),&#10;                        &quot;SALARY_GENERATED&quot;, null, &quot;Automatic monthly salary payment generated&quot;);&#10;&#10;                    System.out.println(&quot;✓ Generated salary payment for &quot; + user.getName() +&#10;                        &quot; - Amount: $&quot; + user.getMonthlySalary() + &quot; (Payment ID: &quot; + createdPayment.getPaymentId() + &quot;)&quot;);&#10;                    successCount++;&#10;                } else {&#10;                    System.out.println(&quot;❌ Failed to create salary payment for &quot; + user.getName());&#10;                }&#10;&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;❌ Error processing salary for &quot; + user.getName() + &quot;: &quot; + e.getMessage());&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;\n=== SALARY GENERATION COMPLETE ===&quot;);&#10;        System.out.println(&quot;✓ Successfully generated: &quot; + successCount + &quot; payments&quot;);&#10;        System.out.println(&quot;⚠️  Skipped: &quot; + skipCount + &quot; users&quot;);&#10;        System.out.println(&quot;Total processed: &quot; + (successCount + skipCount) + &quot; users&quot;);&#10;    }&#10;&#10;    /**&#10;     * Check if a salary payment already exists for a user in a specific month&#10;     */&#10;    private boolean salaryPaymentExistsForMonth(int userId, YearMonth yearMonth) throws SQLException {&#10;        // Check if there's already a salary payment for this user this month&#10;        LocalDate startOfMonth = yearMonth.atDay(1);&#10;        LocalDate endOfMonth = yearMonth.atEndOfMonth();&#10;&#10;        return paymentRepository.existsSalaryPaymentForUserInPeriod(userId, startOfMonth, endOfMonth);&#10;    }&#10;&#10;    /**&#10;     * Get or create the &quot;Salary&quot; category&#10;     */&#10;    private Integer getSalaryCategoryId() throws SQLException {&#10;        var salaryCategory = categoryRepository.findByName(&quot;Salary&quot;);&#10;        if (salaryCategory != null) {&#10;            return salaryCategory.getCategoryId();&#10;        }&#10;&#10;        // Create salary category if it doesn't exist&#10;        var newCategory = categoryRepository.createCategory(&quot;Salary&quot;);&#10;        return newCategory != null ? newCategory.getCategoryId() : 1; // Fallback to first category&#10;    }&#10;&#10;    /**&#10;     * Get the APPROVED status ID&#10;     */&#10;    private Integer getApprovedStatusId() throws SQLException {&#10;        var approvedStatus = statusRepository.findByName(&quot;APPROVED&quot;);&#10;        return approvedStatus != null ? approvedStatus.getStatusId() : 2; // Fallback to status ID 2&#10;    }&#10;&#10;    /**&#10;     * Update a user's monthly salary&#10;     */&#10;    public boolean updateUserSalary(int userId, BigDecimal monthlySalary, LocalDate effectiveDate) throws SQLException {&#10;        return userRepository.updateUserSalary(userId, monthlySalary, effectiveDate);&#10;    }&#10;&#10;    /**&#10;     * Get all users with salary information&#10;     */&#10;    public List&lt;User&gt; getUsersWithSalary() throws SQLException {&#10;        return userRepository.findUsersWithSalary();&#10;    }&#10;&#10;    /**&#10;     * Generate salary payments for a specific user for the current month&#10;     */&#10;    public boolean generateSalaryForUser(int userId) throws SQLException {&#10;        var userOptional = userRepository.findByEmail(getUserEmailById(userId));&#10;        if (userOptional.isEmpty()) {&#10;            return false;&#10;        }&#10;&#10;        User user = userOptional.get();&#10;        YearMonth currentMonth = YearMonth.now();&#10;&#10;        // Check eligibility&#10;        if (user.getMonthlySalary() == null || user.getMonthlySalary().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            return false;&#10;        }&#10;&#10;        if (salaryPaymentExistsForMonth(userId, currentMonth)) {&#10;            return false; // Already paid this month&#10;        }&#10;&#10;        // Generate payment for this user only&#10;        List&lt;User&gt; singleUserList = List.of(user);&#10;        generateSalaryPaymentsForMonth(currentMonth);&#10;&#10;        return true;&#10;    }&#10;&#10;    private String getUserEmailById(int userId) throws SQLException {&#10;        List&lt;User&gt; allUsers = userRepository.findAll();&#10;        return allUsers.stream()&#10;                .filter(u -&gt; u.getUserId() == userId)&#10;                .map(User::getEmail)&#10;                .findFirst()&#10;                .orElse(&quot;unknown@unknown.com&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.service;&#10;&#10;import org.paymentmanagementsystem.model.Payment;&#10;import org.paymentmanagementsystem.model.User;&#10;import org.paymentmanagementsystem.repository.CategoryRepository;&#10;import org.paymentmanagementsystem.repository.PaymentRepository;&#10;import org.paymentmanagementsystem.repository.StatusRepository;&#10;import org.paymentmanagementsystem.repository.UserRepository;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.YearMonth;&#10;import java.util.List;&#10;&#10;public class SalaryService {&#10;    private final UserRepository userRepository;&#10;    private final PaymentRepository paymentRepository;&#10;    private final CategoryRepository categoryRepository;&#10;    private final StatusRepository statusRepository;&#10;    private final AuditService auditService;&#10;&#10;    public SalaryService() throws Exception {&#10;        this.userRepository = new UserRepository();&#10;        this.paymentRepository = new PaymentRepository();&#10;        this.categoryRepository = new CategoryRepository();&#10;        this.statusRepository = new StatusRepository();&#10;        this.auditService = new AuditService();&#10;    }&#10;    &#10;    public void generateMonthlySalaryPayments() throws SQLException {&#10;        YearMonth currentMonth = YearMonth.now();&#10;        generateSalaryPaymentsForMonth(currentMonth);&#10;    }&#10;    &#10;    public void generateSalaryPaymentsForMonth(YearMonth yearMonth) throws SQLException {&#10;        List&lt;User&gt; usersWithSalary = userRepository.findUsersWithSalary();&#10;&#10;        System.out.println(&quot;\n=== GENERATING MONTHLY SALARY PAYMENTS ===&quot;);&#10;        System.out.println(&quot;Month: &quot; + yearMonth);&#10;        System.out.println(&quot;Eligible users: &quot; + usersWithSalary.size());&#10;&#10;        int successCount = 0;&#10;        int skipCount = 0;&#10;        &#10;        Integer salaryCategoryId = getSalaryCategoryId();&#10;        Integer approvedStatusId = getApprovedStatusId();&#10;&#10;        for (User user : usersWithSalary) {&#10;            try {&#10;                // Check if user has salary and effective date&#10;                if (user.getMonthlySalary() == null || user.getMonthlySalary().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - No salary set&quot;);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                if (user.getSalaryEffectiveDate() == null) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - No effective date set&quot;);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                // Check if salary is effective for this month&#10;                YearMonth effectiveMonth = YearMonth.from(user.getSalaryEffectiveDate());&#10;                if (yearMonth.isBefore(effectiveMonth)) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - Salary not effective yet&quot;);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                // Check if salary payment already exists for this month&#10;                if (salaryPaymentExistsForMonth(user.getUserId(), yearMonth)) {&#10;                    System.out.println(&quot;⚠️  Skipping &quot; + user.getName() + &quot; - Salary already paid for &quot; + yearMonth);&#10;                    skipCount++;&#10;                    continue;&#10;                }&#10;&#10;                // Create salary payment&#10;                Payment salaryPayment = new Payment();&#10;                salaryPayment.setAmount(user.getMonthlySalary());&#10;                salaryPayment.setType(&quot;SALARY&quot;);&#10;                salaryPayment.setDescription(&quot;Monthly salary for &quot; + yearMonth + &quot; - &quot; + user.getName());&#10;                salaryPayment.setCategoryId(salaryCategoryId);&#10;                salaryPayment.setStatusId(approvedStatusId); // Auto-approve salary payments&#10;                salaryPayment.setCreatedByUserId(user.getUserId()); // Salary is &quot;created by&quot; the user receiving it&#10;                salaryPayment.setTeamId(user.getTeamId());&#10;                salaryPayment.setPaymentDate(LocalDateTime.now());&#10;&#10;                // Save the payment&#10;                Payment createdPayment = paymentRepository.save(salaryPayment);&#10;                &#10;                if (createdPayment != null) {&#10;                    // Create audit trail using the existing logPaymentCreation method&#10;                    User auditUser = new User();&#10;                    auditUser.setUserId(user.getUserId());&#10;                    auditService.logPaymentCreation(createdPayment, auditUser);&#10;                    &#10;                    System.out.println(&quot;✓ Generated salary payment for &quot; + user.getName() + &#10;                        &quot; - Amount: $&quot; + user.getMonthlySalary() + &quot; (Payment ID: &quot; + createdPayment.getPaymentId() + &quot;)&quot;);&#10;                    successCount++;&#10;                } else {&#10;                    System.out.println(&quot;❌ Failed to create salary payment for &quot; + user.getName());&#10;                }&#10;                &#10;            } catch (Exception e) {&#10;                System.out.println(&quot;❌ Error processing salary for &quot; + user.getName() + &quot;: &quot; + e.getMessage());&#10;            }&#10;        }&#10;        &#10;        System.out.println(&quot;\n=== SALARY GENERATION COMPLETE ===&quot;);&#10;        System.out.println(&quot;✓ Successfully generated: &quot; + successCount + &quot; payments&quot;);&#10;        System.out.println(&quot;⚠️  Skipped: &quot; + skipCount + &quot; users&quot;);&#10;        System.out.println(&quot;Total processed: &quot; + (successCount + skipCount) + &quot; users&quot;);&#10;    }&#10;&#10;    /**&#10;     * Check if a salary payment already exists for a user in a specific month&#10;     */&#10;    private boolean salaryPaymentExistsForMonth(int userId, YearMonth yearMonth) throws SQLException {&#10;        // Check if there's already a salary payment for this user this month&#10;        LocalDate startOfMonth = yearMonth.atDay(1);&#10;        LocalDate endOfMonth = yearMonth.atEndOfMonth();&#10;&#10;        return paymentRepository.existsSalaryPaymentForUserInPeriod(userId, startOfMonth, endOfMonth);&#10;    }&#10;&#10;    /**&#10;     * Get or create the &quot;Salary&quot; category&#10;     */&#10;    private Integer getSalaryCategoryId() throws SQLException {&#10;        var salaryCategory = categoryRepository.findByName(&quot;Salary&quot;);&#10;        if (salaryCategory != null) {&#10;            return salaryCategory.getCategoryId();&#10;        }&#10;&#10;        // Create salary category if it doesn't exist&#10;        var newCategory = categoryRepository.createCategory(&quot;Salary&quot;);&#10;        return newCategory != null ? newCategory.getCategoryId() : 1; // Fallback to first category&#10;    }&#10;&#10;    /**&#10;     * Get the APPROVED status ID&#10;     */&#10;    private Integer getApprovedStatusId() throws SQLException {&#10;        var approvedStatus = statusRepository.findByName(&quot;APPROVED&quot;);&#10;        return approvedStatus != null ? approvedStatus.getStatusId() : 2; // Fallback to status ID 2&#10;    }&#10;&#10;    /**&#10;     * Update a user's monthly salary&#10;     */&#10;    public boolean updateUserSalary(int userId, BigDecimal monthlySalary, LocalDate effectiveDate) throws SQLException {&#10;        return userRepository.updateUserSalary(userId, monthlySalary, effectiveDate);&#10;    }&#10;&#10;    /**&#10;     * Get all users with salary information&#10;     */&#10;    public List&lt;User&gt; getUsersWithSalary() throws SQLException {&#10;        return userRepository.findUsersWithSalary();&#10;    }&#10;&#10;    /**&#10;     * Generate salary payments for a specific user for the current month&#10;     */&#10;    public boolean generateSalaryForUser(int userId) throws SQLException {&#10;        var userOptional = userRepository.findByEmail(getUserEmailById(userId));&#10;        if (userOptional.isEmpty()) {&#10;            return false;&#10;        }&#10;&#10;        User user = userOptional.get();&#10;        YearMonth currentMonth = YearMonth.now();&#10;&#10;        // Check eligibility&#10;        if (user.getMonthlySalary() == null || user.getMonthlySalary().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            return false;&#10;        }&#10;&#10;        if (salaryPaymentExistsForMonth(userId, currentMonth)) {&#10;            return false; // Already paid this month&#10;        }&#10;&#10;        // Generate payment for this user only&#10;        List&lt;User&gt; singleUserList = List.of(user);&#10;        generateSalaryPaymentsForMonth(currentMonth);&#10;&#10;        return true;&#10;    }&#10;&#10;    private String getUserEmailById(int userId) throws SQLException {&#10;        List&lt;User&gt; allUsers = userRepository.findAll();&#10;        return allUsers.stream()&#10;                .filter(u -&gt; u.getUserId() == userId)&#10;                .map(User::getEmail)&#10;                .findFirst()&#10;                .orElse(&quot;unknown@unknown.com&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/util/DatabaseInitializer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paymentmanagementsystem/util/DatabaseInitializer.java" />
              <option name="originalContent" value="package org.paymentmanagementsystem.util;&#10;&#10;import java.sql.*;&#10;import java.util.Properties;&#10;&#10;public class DatabaseInitializer {&#10;&#10;    public static void initializeDatabase(Properties dbProperties) throws SQLException, ClassNotFoundException {&#10;        String fullUrl = dbProperties.getProperty(&quot;db.url&quot;);&#10;        String username = dbProperties.getProperty(&quot;db.username&quot;);&#10;        String password = dbProperties.getProperty(&quot;db.password&quot;);&#10;        String driver = dbProperties.getProperty(&quot;db.driver&quot;);&#10;&#10;        // Load PostgreSQL driver&#10;        Class.forName(driver);&#10;&#10;        // Extract database name&#10;        String[] urlParts = fullUrl.split(&quot;/&quot;);&#10;        String databaseName = urlParts[urlParts.length - 1];&#10;        String postgresUrl = fullUrl.substring(0, fullUrl.lastIndexOf('/')) + &quot;/postgres&quot;;&#10;&#10;        System.out.println(&quot;Checking database existence...&quot;);&#10;&#10;        // Connect to postgres database to create target database if needed&#10;        try (Connection conn = DriverManager.getConnection(postgresUrl, username, password);&#10;             Statement stmt = conn.createStatement()) {&#10;&#10;            // Check if database exists&#10;            String checkDbQuery = &quot;SELECT 1 FROM pg_database WHERE datname = '&quot; + databaseName + &quot;'&quot;;&#10;            boolean dbExists = stmt.executeQuery(checkDbQuery).next();&#10;&#10;            if (!dbExists) {&#10;                System.out.println(&quot;Creating database: &quot; + databaseName);&#10;                stmt.executeUpdate(&quot;CREATE DATABASE &quot; + databaseName);&#10;                System.out.println(&quot;Database created successfully!&quot;);&#10;            } else {&#10;                System.out.println(&quot;Database already exists: &quot; + databaseName);&#10;            }&#10;        }&#10;&#10;        // Now connect to the target database and create schema&#10;        try (Connection conn = DriverManager.getConnection(fullUrl, username, password)) {&#10;            boolean isFirstTimeSetup = !schemaExists(conn);&#10;&#10;            System.out.println(&quot;First time setup: &quot; + isFirstTimeSetup);&#10;&#10;            if (isFirstTimeSetup) {&#10;                System.out.println(&quot;Creating database schema...&quot;);&#10;                createSchema(conn);&#10;                System.out.println(&quot;Database schema created successfully!&quot;);&#10;&#10;                // Create default admin user on first setup&#10;                createDefaultAdminUser(conn);&#10;            } else {&#10;                System.out.println(&quot;Database schema already exists.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static boolean schemaExists(Connection conn) throws SQLException {&#10;        String checkQuery = &quot;&quot;&quot;&#10;            SELECT COUNT(*) FROM information_schema.tables &#10;            WHERE table_schema = 'public' &#10;            AND table_name IN ('roles', 'teams', 'users', 'categories', 'status', 'payments', 'audit_trail')&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            ResultSet rs = stmt.executeQuery(checkQuery);&#10;            if (rs.next()) {&#10;                return rs.getInt(1) == 7; // All 7 tables must exist (including teams)&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private static void createSchema(Connection conn) throws SQLException {&#10;        String[] schemaStatements = {&#10;                // Create roles table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE roles (&#10;                role_id SERIAL PRIMARY KEY,&#10;                role_name VARCHAR(50) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create teams table (without foreign key initially)&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE teams (&#10;                team_id SERIAL PRIMARY KEY,&#10;                team_name VARCHAR(100) NOT NULL UNIQUE,&#10;                created_by_user_id INTEGER NOT NULL,&#10;                created_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create users table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE users (&#10;                user_id SERIAL PRIMARY KEY,&#10;                name VARCHAR(100) NOT NULL,&#10;                email VARCHAR(100) NOT NULL UNIQUE,&#10;                password_hash VARCHAR(255) NOT NULL,&#10;                role_id INTEGER NOT NULL,&#10;                team_id INTEGER,&#10;                FOREIGN KEY (role_id) REFERENCES roles(role_id),&#10;                FOREIGN KEY (team_id) REFERENCES teams(team_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create categories table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE categories (&#10;                category_id SERIAL PRIMARY KEY,&#10;                category_name VARCHAR(100) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create status table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE status (&#10;                status_id SERIAL PRIMARY KEY,&#10;                status_name VARCHAR(50) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create payments table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE payments (&#10;                payment_id SERIAL PRIMARY KEY,&#10;                amount DECIMAL(15,2) NOT NULL,&#10;                type VARCHAR(50) NOT NULL,&#10;                payment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;                description TEXT,&#10;                category_id INTEGER NOT NULL,&#10;                status_id INTEGER NOT NULL,&#10;                created_by_user_id INTEGER NOT NULL,&#10;                team_id INTEGER,&#10;                FOREIGN KEY (category_id) REFERENCES categories(category_id),&#10;                FOREIGN KEY (status_id) REFERENCES status(status_id),&#10;                FOREIGN KEY (created_by_user_id) REFERENCES users(user_id),&#10;                FOREIGN KEY (team_id) REFERENCES teams(team_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create audit_trail table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE audit_trail (&#10;                audit_id SERIAL PRIMARY KEY,&#10;                payment_id INTEGER NOT NULL,&#10;                user_id INTEGER NOT NULL,&#10;                action VARCHAR(50) NOT NULL,&#10;                change_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;                old_value TEXT,&#10;                new_value TEXT,&#10;                FOREIGN KEY (payment_id) REFERENCES payments(payment_id),&#10;                FOREIGN KEY (user_id) REFERENCES users(user_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Add foreign key constraint to teams table (after users table is created)&#10;                &quot;&quot;&quot;&#10;            ALTER TABLE teams &#10;            ADD CONSTRAINT fk_teams_created_by &#10;            FOREIGN KEY (created_by_user_id) REFERENCES users(user_id)&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert default roles&#10;                &quot;&quot;&quot;&#10;            INSERT INTO roles (role_name) VALUES &#10;            ('admin'),&#10;            ('finance_manager'),&#10;            ('viewer')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert default categories&#10;                &quot;&quot;&quot;&#10;            INSERT INTO categories (category_name) VALUES &#10;            ('Office Supplies'),&#10;            ('Travel'),&#10;            ('Equipment'),&#10;            ('Software'),&#10;            ('Utilities')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert default status values&#10;                &quot;&quot;&quot;&#10;            INSERT INTO status (status_name) VALUES &#10;            ('PENDING'),&#10;            ('APPROVED'),&#10;            ('REJECTED')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create indexes for better performance&#10;                &quot;CREATE INDEX idx_payments_created_by ON payments(created_by_user_id)&quot;,&#10;                &quot;CREATE INDEX idx_payments_status ON payments(status_id)&quot;,&#10;                &quot;CREATE INDEX idx_payments_date ON payments(payment_date)&quot;,&#10;                &quot;CREATE INDEX idx_payments_team ON payments(team_id)&quot;,&#10;                &quot;CREATE INDEX idx_users_team ON users(team_id)&quot;,&#10;                &quot;CREATE INDEX idx_audit_trail_payment ON audit_trail(payment_id)&quot;&#10;        };&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            conn.setAutoCommit(false); // Start transaction&#10;&#10;            for (String statement : schemaStatements) {&#10;                String trimmed = statement.trim();&#10;                if (!trimmed.isEmpty()) {&#10;                    stmt.executeUpdate(trimmed);&#10;                }&#10;            }&#10;&#10;            conn.commit();&#10;            conn.setAutoCommit(true);&#10;        } catch (SQLException e) {&#10;            conn.rollback();&#10;            conn.setAutoCommit(true);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    private static void createDefaultAdminUser(Connection conn) throws SQLException {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(50));&#10;        System.out.println(&quot;FIRST TIME SETUP - CREATING DEFAULT ADMIN USER&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;&#10;        try {&#10;            // Hash the default admin password using BCrypt (same as PasswordUtil)&#10;            String hashedPassword = PasswordUtil.hashPassword(&quot;admin@123&quot;);&#10;&#10;            // Insert default admin user&#10;            String insertAdminQuery = &quot;&quot;&quot;&#10;                INSERT INTO users (name, email, password_hash, role_id) &#10;                VALUES (?, ?, ?, (SELECT role_id FROM roles WHERE role_name = 'admin'))&#10;                &quot;&quot;&quot;;&#10;&#10;            try (PreparedStatement stmt = conn.prepareStatement(insertAdminQuery)) {&#10;                stmt.setString(1, &quot;admin&quot;);&#10;                stmt.setString(2, &quot;admin@admin.tech&quot;);&#10;                stmt.setString(3, hashedPassword);&#10;&#10;                int rowsInserted = stmt.executeUpdate();&#10;&#10;                if (rowsInserted &gt; 0) {&#10;                    System.out.println(&quot;✓ Default admin user created successfully!&quot;);&#10;                    System.out.println();&#10;                    System.out.println(&quot;DEFAULT ADMIN CREDENTIALS:&quot;);&#10;                    System.out.println(&quot;Name:     admin&quot;);&#10;                    System.out.println(&quot;Email:    admin@admin.tech&quot;);&#10;                    System.out.println(&quot;Password: admin@123&quot;);&#10;                    System.out.println(&quot;Role:     admin&quot;);&#10;                    System.out.println();&#10;                    System.out.println(&quot;⚠️  IMPORTANT: Please change the default password after first login!&quot;);&#10;                    System.out.println(&quot;=&quot;.repeat(50));&#10;                    System.out.println();&#10;                } else {&#10;                    throw new SQLException(&quot;No rows inserted for default admin user&quot;);&#10;                }&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to create default admin user: &quot; + e.getMessage());&#10;            throw new SQLException(&quot;Error creating default admin user&quot;, e);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.paymentmanagementsystem.util;&#10;&#10;import java.sql.*;&#10;import java.util.Properties;&#10;&#10;public class DatabaseInitializer {&#10;&#10;    public static void initializeDatabase(Properties dbProperties) throws SQLException, ClassNotFoundException {&#10;        String fullUrl = dbProperties.getProperty(&quot;db.url&quot;);&#10;        String username = dbProperties.getProperty(&quot;db.username&quot;);&#10;        String password = dbProperties.getProperty(&quot;db.password&quot;);&#10;        String driver = dbProperties.getProperty(&quot;db.driver&quot;);&#10;&#10;        // Load PostgreSQL driver&#10;        Class.forName(driver);&#10;&#10;        // Extract database name&#10;        String[] urlParts = fullUrl.split(&quot;/&quot;);&#10;        String databaseName = urlParts[urlParts.length - 1];&#10;        String postgresUrl = fullUrl.substring(0, fullUrl.lastIndexOf('/')) + &quot;/postgres&quot;;&#10;&#10;        System.out.println(&quot;Checking database existence...&quot;);&#10;&#10;        // Connect to postgres database to create target database if needed&#10;        try (Connection conn = DriverManager.getConnection(postgresUrl, username, password);&#10;             Statement stmt = conn.createStatement()) {&#10;&#10;            // Check if database exists&#10;            String checkDbQuery = &quot;SELECT 1 FROM pg_database WHERE datname = '&quot; + databaseName + &quot;'&quot;;&#10;            boolean dbExists = stmt.executeQuery(checkDbQuery).next();&#10;&#10;            if (!dbExists) {&#10;                System.out.println(&quot;Creating database: &quot; + databaseName);&#10;                stmt.executeUpdate(&quot;CREATE DATABASE &quot; + databaseName);&#10;                System.out.println(&quot;Database created successfully!&quot;);&#10;            } else {&#10;                System.out.println(&quot;Database already exists: &quot; + databaseName);&#10;            }&#10;        }&#10;&#10;        // Now connect to the target database and create schema&#10;        try (Connection conn = DriverManager.getConnection(fullUrl, username, password)) {&#10;            boolean isFirstTimeSetup = !schemaExists(conn);&#10;&#10;            System.out.println(&quot;First time setup: &quot; + isFirstTimeSetup);&#10;&#10;            if (isFirstTimeSetup) {&#10;                System.out.println(&quot;Creating database schema...&quot;);&#10;                createSchema(conn);&#10;                System.out.println(&quot;Database schema created successfully!&quot;);&#10;&#10;                // Create default admin user on first setup&#10;                createDefaultAdminUser(conn);&#10;            } else {&#10;                System.out.println(&quot;Database schema already exists.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static boolean schemaExists(Connection conn) throws SQLException {&#10;        String checkQuery = &quot;&quot;&quot;&#10;            SELECT COUNT(*) FROM information_schema.tables &#10;            WHERE table_schema = 'public' &#10;            AND table_name IN ('roles', 'teams', 'users', 'categories', 'status', 'payments', 'audit_trail')&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            ResultSet rs = stmt.executeQuery(checkQuery);&#10;            if (rs.next()) {&#10;                return rs.getInt(1) == 7; // All 7 tables must exist (including teams)&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private static void createSchema(Connection conn) throws SQLException {&#10;        String[] schemaStatements = {&#10;                // Create roles table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE roles (&#10;                role_id SERIAL PRIMARY KEY,&#10;                role_name VARCHAR(50) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create teams table (without foreign key initially)&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE teams (&#10;                team_id SERIAL PRIMARY KEY,&#10;                team_name VARCHAR(100) NOT NULL UNIQUE,&#10;                created_by_user_id INTEGER NOT NULL,&#10;                created_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create users table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE users (&#10;                user_id SERIAL PRIMARY KEY,&#10;                name VARCHAR(100) NOT NULL,&#10;                email VARCHAR(100) NOT NULL UNIQUE,&#10;                password_hash VARCHAR(255) NOT NULL,&#10;                role_id INTEGER NOT NULL,&#10;                team_id INTEGER,&#10;                monthly_salary DECIMAL(15,2) DEFAULT 0.00,&#10;                salary_effective_date DATE,&#10;                FOREIGN KEY (role_id) REFERENCES roles(role_id),&#10;                FOREIGN KEY (team_id) REFERENCES teams(team_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create categories table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE categories (&#10;                category_id SERIAL PRIMARY KEY,&#10;                category_name VARCHAR(100) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create status table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE status (&#10;                status_id SERIAL PRIMARY KEY,&#10;                status_name VARCHAR(50) NOT NULL UNIQUE&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create payments table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE payments (&#10;                payment_id SERIAL PRIMARY KEY,&#10;                amount DECIMAL(15,2) NOT NULL,&#10;                type VARCHAR(50) NOT NULL,&#10;                payment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;                description TEXT,&#10;                category_id INTEGER NOT NULL,&#10;                status_id INTEGER NOT NULL,&#10;                created_by_user_id INTEGER NOT NULL,&#10;                team_id INTEGER,&#10;                FOREIGN KEY (category_id) REFERENCES categories(category_id),&#10;                FOREIGN KEY (status_id) REFERENCES status(status_id),&#10;                FOREIGN KEY (created_by_user_id) REFERENCES users(user_id),&#10;                FOREIGN KEY (team_id) REFERENCES teams(team_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create audit_trail table&#10;                &quot;&quot;&quot;&#10;            CREATE TABLE audit_trail (&#10;                audit_id SERIAL PRIMARY KEY,&#10;                payment_id INTEGER NOT NULL,&#10;                user_id INTEGER NOT NULL,&#10;                action VARCHAR(50) NOT NULL,&#10;                change_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;                old_value TEXT,&#10;                new_value TEXT,&#10;                FOREIGN KEY (payment_id) REFERENCES payments(payment_id),&#10;                FOREIGN KEY (user_id) REFERENCES users(user_id)&#10;            )&#10;            &quot;&quot;&quot;,&#10;&#10;                // Add foreign key constraint to teams table (after users table is created)&#10;                &quot;&quot;&quot;&#10;            ALTER TABLE teams &#10;            ADD CONSTRAINT fk_teams_created_by &#10;            FOREIGN KEY (created_by_user_id) REFERENCES users(user_id)&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert default roles&#10;                &quot;&quot;&quot;&#10;            INSERT INTO roles (role_name) VALUES &#10;            ('admin'),&#10;            ('finance_manager'),&#10;            ('viewer')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert default categories&#10;                &quot;&quot;&quot;&#10;            INSERT INTO categories (category_name) VALUES &#10;            ('Office Supplies'),&#10;            ('Travel'),&#10;            ('Equipment'),&#10;            ('Software'),&#10;            ('Utilities')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Insert default status values&#10;                &quot;&quot;&quot;&#10;            INSERT INTO status (status_name) VALUES &#10;            ('PENDING'),&#10;            ('APPROVED'),&#10;            ('REJECTED')&#10;            &quot;&quot;&quot;,&#10;&#10;                // Create indexes for better performance&#10;                &quot;CREATE INDEX idx_payments_created_by ON payments(created_by_user_id)&quot;,&#10;                &quot;CREATE INDEX idx_payments_status ON payments(status_id)&quot;,&#10;                &quot;CREATE INDEX idx_payments_date ON payments(payment_date)&quot;,&#10;                &quot;CREATE INDEX idx_payments_team ON payments(team_id)&quot;,&#10;                &quot;CREATE INDEX idx_users_team ON users(team_id)&quot;,&#10;                &quot;CREATE INDEX idx_audit_trail_payment ON audit_trail(payment_id)&quot;&#10;        };&#10;&#10;        try (Statement stmt = conn.createStatement()) {&#10;            conn.setAutoCommit(false); // Start transaction&#10;&#10;            for (String statement : schemaStatements) {&#10;                String trimmed = statement.trim();&#10;                if (!trimmed.isEmpty()) {&#10;                    stmt.executeUpdate(trimmed);&#10;                }&#10;            }&#10;&#10;            conn.commit();&#10;            conn.setAutoCommit(true);&#10;        } catch (SQLException e) {&#10;            conn.rollback();&#10;            conn.setAutoCommit(true);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    private static void createDefaultAdminUser(Connection conn) throws SQLException {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(50));&#10;        System.out.println(&quot;FIRST TIME SETUP - CREATING DEFAULT ADMIN USER&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;&#10;        try {&#10;            // Hash the default admin password using BCrypt (same as PasswordUtil)&#10;            String hashedPassword = PasswordUtil.hashPassword(&quot;admin@123&quot;);&#10;&#10;            // Insert default admin user&#10;            String insertAdminQuery = &quot;&quot;&quot;&#10;                INSERT INTO users (name, email, password_hash, role_id) &#10;                VALUES (?, ?, ?, (SELECT role_id FROM roles WHERE role_name = 'admin'))&#10;                &quot;&quot;&quot;;&#10;&#10;            try (PreparedStatement stmt = conn.prepareStatement(insertAdminQuery)) {&#10;                stmt.setString(1, &quot;admin&quot;);&#10;                stmt.setString(2, &quot;admin@admin.tech&quot;);&#10;                stmt.setString(3, hashedPassword);&#10;&#10;                int rowsInserted = stmt.executeUpdate();&#10;&#10;                if (rowsInserted &gt; 0) {&#10;                    System.out.println(&quot;✓ Default admin user created successfully!&quot;);&#10;                    System.out.println();&#10;                    System.out.println(&quot;DEFAULT ADMIN CREDENTIALS:&quot;);&#10;                    System.out.println(&quot;Name:     admin&quot;);&#10;                    System.out.println(&quot;Email:    admin@admin.tech&quot;);&#10;                    System.out.println(&quot;Password: admin@123&quot;);&#10;                    System.out.println(&quot;Role:     admin&quot;);&#10;                    System.out.println();&#10;                    System.out.println(&quot;⚠️  IMPORTANT: Please change the default password after first login!&quot;);&#10;                    System.out.println(&quot;=&quot;.repeat(50));&#10;                    System.out.println();&#10;                } else {&#10;                    throw new SQLException(&quot;No rows inserted for default admin user&quot;);&#10;                }&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to create default admin user: &quot; + e.getMessage());&#10;            throw new SQLException(&quot;Error creating default admin user&quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application-miniproject2.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application-miniproject2.properties" />
              <option name="updatedContent" value="# Database Configuration&#10;spring.datasource.url=jdbc:postgresql://localhost:5432/payment_management_db&#10;spring.datasource.username=postgres&#10;spring.datasource.password=password&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;# JPA Configuration&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.format_sql=true&#10;spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect&#10;&#10;# JWT Configuration&#10;jwt.secret=mySecretKey&#10;jwt.expiration=86400000&#10;&#10;# Server Configuration&#10;server.port=8080&#10;&#10;# Logging&#10;logging.level.org.springframework.security=DEBUG&#10;logging.level.miniproject2.paymentmanagementsystem=DEBUG" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/database_setup.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/database_setup.sql" />
              <option name="updatedContent" value="-- Create database (run this first as superuser)&#10;-- CREATE DATABASE payment_management_db&#10;--     WITH &#10;--     OWNER = postgres&#10;--     ENCODING = 'UTF8'&#10;--     LC_COLLATE = 'en_US.utf8'&#10;--     LC_CTYPE = 'en_US.utf8'&#10;--     TABLESPACE = pg_default&#10;--     CONNECTION LIMIT = -1;&#10;&#10;-- After creating database, connect to it and run the following:&#10;&#10;-- Create users table&#10;CREATE TABLE IF NOT EXISTS users (&#10;    id BIGSERIAL PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) NOT NULL UNIQUE,&#10;    password VARCHAR(255) NOT NULL,&#10;    role VARCHAR(20) NOT NULL DEFAULT 'VIEWER',&#10;    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Create payments table&#10;CREATE TABLE IF NOT EXISTS payments (&#10;    id BIGSERIAL PRIMARY KEY,&#10;    amount DECIMAL(19,2) NOT NULL,&#10;    payment_type VARCHAR(20) NOT NULL,&#10;    category VARCHAR(20) NOT NULL,&#10;    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',&#10;    date TIMESTAMP NOT NULL,&#10;    created_by BIGINT NOT NULL,&#10;    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE RESTRICT&#10;);&#10;&#10;-- Create indexes for better performance&#10;CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);&#10;CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);&#10;CREATE INDEX IF NOT EXISTS idx_payments_created_by ON payments(created_by);&#10;CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);&#10;CREATE INDEX IF NOT EXISTS idx_payments_payment_type ON payments(payment_type);&#10;CREATE INDEX IF NOT EXISTS idx_payments_category ON payments(category);&#10;CREATE INDEX IF NOT EXISTS idx_payments_date ON payments(date);&#10;CREATE INDEX IF NOT EXISTS idx_payments_created_at ON payments(created_at);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>